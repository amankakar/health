{"version":3,"file":"static/development/pages/hospital/hospitalDetails.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Header.js","webpack:///./components/Layout.js","webpack:///./ethereum/getWeb3.js","webpack:///./ethereum/web3.js","webpack:///./pages/hospital/hospitalDetails.js","webpack:///./routes.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"bignumber.js\"","webpack:///external \"moment\"","webpack:///external \"next-routes\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"react-dom\"","webpack:///external \"react-semantic-datetime\"","webpack:///external \"react-toggle-display\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"truffle-contract\"","webpack:///external \"web3\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\nexport default () => {\n  return (\n    <Menu style={{ marginTop: 10 }}>\n      <Link route=\"/\">\n        <a className=\"item\">Health Care Management System</a>\n      </Link>\n      <Menu position=\"right\">\n        <Link route=\"/\">\n          <a className=\"item\"> Home </a>\n        </Link>\n        <Link route=\"/hospital\">\n          <a className=\"item\"> hospital </a>\n        </Link>\n        <Link route=\"/patient\">\n          <a className=\"item\"> patient </a>\n        </Link>\n        <Link route=\"/doctor\">\n          <a className=\"item\"> doctor </a>\n        </Link>\n      </Menu>\n    </Menu>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport Head from \"next/head\";\n\nimport Header from \"./Header\";\nexport default props => {\n  return (\n    <Container>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.0/dist/semantic.min.css\"\n        />\n        <link\n          href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\n          rel=\"stylesheet\"\n        />\n      </Head>\n\n      <Header />\n      {props.children}\n    </Container>\n  );\n};\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import Web3 from \"web3\";\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n  //we are in browser and metamask is running\n  web3 = new Web3(window.web3.currentProvider);\n} else {\n  //we are on the server OR user is not running metamask\n  const provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\n\n  web3 = new Web3(provider);\n}\n\nexport default web3;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ToggleDisplay from \"react-toggle-display\";\nimport ReceptionsitFactory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Receptionist from \"../../build/contracts/Receptionsit.json\";\n//import PatientFactory from \"../../build/contracts/PatientFactory.json\";\nimport Patient from \"../../build/contracts/Patient.json\";\n//import DoctorFactory from \"../../build/contracts/DoctorFactory.json\";\nimport Doctor from \"../../build/contracts/Doctor.json\";\nimport {\n  Card,\n  Button,\n  Tab,\n  Form,\n  Input,\n  Dropdown,\n  Table,\n  Message\n} from \"semantic-ui-react\";\nimport DatetimePicker from \"react-semantic-datetime\";\nimport moment from \"moment\"; //for date picker\nimport { BigNumber } from \"bignumber.js\";\n\nimport { Link } from \"../../routes\";\nimport getWeb3 from \"../../ethereum/getWeb3\";\nimport web3 from \"../../ethereum/web3\";\nimport truffleContract from \"truffle-contract\";\nimport Layout from \"../../components/Layout\";\n// import Dropdown from \"react-dropdown\";\n// import \"../style.css\";\nclass hospitalDetails extends Component {\n  //intialize state of variable use\n  state = {\n    show: false,\n    patientName: \"\",\n    patientAge: \"\",\n    patientGender: \"\",\n    patientId: \"\",\n    doctorName: \"\",\n    doctorGender: \"\",\n    doctorQualification: \"\",\n    doctorId: \"\",\n    appointmentId: \"\",\n    patientAccount: \"\",\n    doctorAccount: \"\",\n    textArea: \"\",\n    currentPatientValue: \"\",\n    currentDoctorValue: \"\",\n    notAdmin: \"\",\n    date: moment(),\n    date1: \"\",\n    dateTimeOpen: false,\n    patientIdArray: null,\n    doctorIdArray: null,\n    appointmentIdResult: \"\",\n    appointmentIdSearch: \"\",\n    patientIdResult: \"\",\n    doctorIdresult: \"\",\n    dateResult: \"\",\n    chepComplaintResult: \"\",\n    errorMessagePatient: \"\",\n    errorMessageDoctor: \"\",\n    errorMessageAppointment: \"\",\n    loading: false\n  };\n  //get Address of  hospital/ Receptionist contract provided in intial props and set show contract information\n  static async getInitialProps(props) {\n    const address = props.query.address;\n    console.log(\"ADdress:\", address);\n    const accounts = await web3.eth.getAccounts();\n    const ContractReceptionist = truffleContract(Receptionist);\n    ContractReceptionist.setProvider(web3.currentProvider);\n    const instanceReceptionist = await ContractReceptionist.at(address);\n    const hospitalSummary = await instanceReceptionist.getSummary.call();\n    console.log(accounts[0], \"and acctual is ===:\", hospitalSummary[2]);\n    const optionsArray = [\"one\", \"two\", \"three\"];\n    console.log(\"S\", hospitalSummary);\n\n    return {\n      address: props.query.address,\n      hospitalName: hospitalSummary[0],\n      adminName: hospitalSummary[1],\n      manager: hospitalSummary[2]\n    };\n  }\n  //unlock admin view\n  onUnlockView = async event => {\n    event.preventDefault();\n    var admin;\n    console.log(\"Clicked\");\n    //const web3 = await getWeb3();\n    console.log(\"web3:\", web3);\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"account at index:\", this.props.manager);\n    console.log(\"account in metamask\", accounts);\n    const Factory = truffleContract(ReceptionsitFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n    console.log(Factory);\n\n    const factoryInstance = await Factory.deployed();\n\n    const patientList = await factoryInstance.getPatientList.call();\n    this.setState({ patientIdArray: patientList });\n    this.preparePatientDropDown();\n\n    const doctorList = await factoryInstance.getDoctorList.call();\n    this.setState({ doctorIdArray: doctorList });\n    this.prepareDoctorDropdown();\n\n    if (this.props.manager === accounts[0]) {\n      this.setState({ show: !this.state.show });\n\n      console.log(\"ISADMIn:\", this.state.show);\n    } else {\n      this.setState({ show: false });\n      this.setState({\n        notAdmin:\n          \"you are not admin or you have selected Wrong account in Metamask please check\"\n      });\n      console.log(\"ISADMIn:\", this.state.show);\n    }\n  };\n\n  //Add Patient\n  addPatient = async () => {\n    //const { patientFactoryInstance } = this.props;\n    const Factory = truffleContract(ReceptionsitFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n    console.log(Factory);\n    //PatinentContract;\n    const Contract = truffleContract(Patient);\n    //console.log(Contract);\n    Contract.setProvider(web3.currentProvider);\n    //  console.log(Contract);\n    const factoryInstance = await Factory.deployed();\n    console.log(\"RESULT:\", factoryInstance.address);\n    if (\n      this.state.patientId == \"\" ||\n      this.state.patientId == 1 ||\n      this.state.patientAccount == \"\" ||\n      this.state.patientAccount == 0\n    ) {\n      alert(\"Please provide patient id and account\");\n    } else {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({ loading: true, errorMessagePatient: \"\" });\n\n        const result = await factoryInstance.addPatient(\n          // 1,\n          // \"Aman\",\n          // \"Male\",\n          // 24,\n          // accounts[0],\n          this.state.patientId,\n          this.state.patientName,\n          this.state.patientGender,\n          this.state.patientAge,\n          this.state.patientAccount,\n          { from: accounts[0] }\n        );\n        alert(\"Patient Added Successfully\");\n        console.log(\"RESULT:\", result);\n      } catch (error) {\n        console.error(error);\n        this.setState({ errorMessagePatient: error.message });\n      }\n      this.setState({ loading: false });\n      console.log(\"action completed\");\n      const patientinstanceAddress = await factoryInstance.patientIdToAddress.call(\n        this.state.patientId\n      );\n      const patientInstance = await Contract.at(patientinstanceAddress);\n\n      const summary = await patientInstance.getSummary.call(\n        this.state.patientId\n      );\n      console.log(\"summary:\", summary);\n      console.log(\"address of patient:\", patientinstanceAddress);\n      this.preparePatientDropDown();\n    }\n  };\n  //prepare dropdown for patient\n  async preparePatientDropDown() {\n    const Factory = truffleContract(ReceptionsitFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n\n    const patientFactoryInstance = await Factory.deployed();\n\n    const patientList = await patientFactoryInstance.getPatientList.call();\n    const patient = await Promise.all(\n      Array(parseInt(patientList))\n        .fill()\n        .map((element, index) => {\n          return patientFactoryInstance.patientId.call(index);\n        })\n    );\n    console.log(\"Patient list:\", patient);\n    this.setState({ patientIdArray: patient });\n\n    console.log(\"patientList:\", this.state.patientIdArray);\n  }\n\n  //prepare dropdown for doctor id\n  async prepareDoctorDropdown() {\n    const Factory = truffleContract(ReceptionsitFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n\n    const doctorFactoryInstance = await Factory.deployed();\n\n    const doctorList = await doctorFactoryInstance.getDoctorList.call();\n    const doctor = await Promise.all(\n      Array(parseInt(doctorList))\n        .fill()\n        .map((element, index) => {\n          return doctorFactoryInstance.doctorId.call(index);\n        })\n    );\n    console.log(\"Doctor list:\", doctor);\n    this.setState({ doctorIdArray: doctor });\n\n    console.log(\"patientList:\", this.state.doctorIdArray);\n  }\n  //Add Doctor\n  addDoctor = async event => {\n    const Factory = truffleContract(ReceptionsitFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n\n    const factoryInstance = await Factory.deployed();\n    if (\n      this.state.doctorId == \"\" ||\n      this.state.doctorId == 2 ||\n      this.state.doctorAccount == \"\" ||\n      this.state.doctorAccount == 0\n    ) {\n      alert(\"Please provide doctor id and account\");\n    } else {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({ loading: true, errorMessageDoctor: \"\" });\n\n        const result = await factoryInstance.addDoctor(\n          // 1,\n          // \"Aman\",\n          // \"Male\",\n          // 24,\n          // accounts[0],\n          this.state.doctorId,\n          this.state.doctorName,\n          this.state.doctorGender,\n          this.state.doctorQualification,\n          this.state.doctorAccount,\n          { from: accounts[0] }\n        );\n        alert(\"Doctor Added Successfully\");\n        console.log(\"RESULT:\", result);\n      } catch (error) {\n        console.error(error);\n        this.setState({ errorMessageDoctor: error.message });\n      }\n      this.setState({ loading: false });\n\n      const doctorInstanceAddress = await factoryInstance.doctorIdToAddress.call(\n        this.state.doctorId\n      );\n      //const doctorInstance = await Contract.at(doctorInstanceAddress);\n      //\n      // const summary = await doctorInstance.getSummary.call(this.state.doctorId);\n      // console.log(\"summary:\", summary);\n      const doctorList = await factoryInstance.getDoctorList.call();\n      console.log(\"doctorlist:\", doctorList.length);\n      //  const patientFactoryInstance = await Factory.deployed();\n      console.log(\"address of Doctor:\", doctorInstanceAddress);\n      this.prepareDoctorDropdown();\n    }\n  };\n\n  //On appointment onSubmit\n  onAppointmentSubmit = async event => {\n    console.log(this.state.currentPatientValue);\n    console.log(this.state.currentDoctorValue);\n    console.log(this.state.date1);\n    console.log(this.state.date);\n    console.log(moment(this.state.myDate).format(\"LLL\"));\n    console.log(this.state.appointmentId);\n    console.log(this.state.textArea);\n    const accounts = await web3.eth.getAccounts();\n    const ContractFactory = truffleContract(ReceptionsitFactory);\n    ContractFactory.setProvider(web3.currentProvider);\n\n    const instanceFactory = await ContractFactory.deployed();\n\n    console.log(this.props.address);\n    const date = moment(this.state.muDate).format(\"LLL\");\n    if (this.state.appointmentId == \"\") {\n      alert(\"please provide appointementId\");\n    } else {\n      try {\n        this.setState({ loading: true, errorMessageAppointment: \"\" });\n        await instanceFactory.createAppointment(\n          this.state.appointmentId,\n          this.state.currentPatientValue,\n          this.state.currentDoctorValue,\n          moment(this.state.myDate).format(\"LLL\"),\n          this.state.textArea,\n          // 123,\n          // 456,\n          // 567,\n          // \"12/14/2018\",\n          // \"fhklolp\",\n          { from: accounts[0] }\n        );\n        alert(\n          \"Appointment Created  and appointment Id :\" +\n            this.state.appointmentId +\n            \"Date of appintment is :\" +\n            date\n        );\n      } catch (err) {\n        console.error(err);\n        this.setState({ errorMessageAppointment: err.message });\n      }\n      this.setState({ loading: false });\n    }\n  };\n\n  onSearchAppointment = async event => {\n    event.preventDefault();\n    const ContractFactory = truffleContract(ReceptionsitFactory);\n    ContractFactory.setProvider(web3.currentProvider);\n\n    const instanceFactory = await ContractFactory.deployed();\n    const appointmentResult = await instanceFactory.appointements.call(\n      parseInt(this.state.appointmentIdSearch)\n    );\n    console.log(appointmentResult);\n    this.setState({\n      appointmentIdResult: appointmentResult[0].toNumber(),\n      patientIdResult: appointmentResult[1].toNumber(),\n      doctorIdresult: appointmentResult[2].toNumber(),\n      dateResult: appointmentResult[3],\n      chepComplaintResult: appointmentResult[4]\n    });\n    console.log(this.state.appointmentResult);\n    return this.onSearch();\n  };\n\n  //search Result render\n  onSearch = () => {\n    if (this.state.appointmentIdResult) {\n      return (\n        <Table singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Appointement Id</Table.HeaderCell>\n              <Table.HeaderCell>Patient Id</Table.HeaderCell>\n              <Table.HeaderCell>Doctor Id</Table.HeaderCell>\n              <Table.HeaderCell>Date</Table.HeaderCell>\n              <Table.HeaderCell>Chief Complaint</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>{this.state.appointmentIdResult}</Table.Cell>\n              <Table.Cell>{this.state.patientIdResult}</Table.Cell>\n              <Table.Cell>{this.state.doctorIdresult}</Table.Cell>\n              <Table.Cell>{this.state.dateResult}</Table.Cell>\n              <Table.Cell>{this.state.chepComplaintResult}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      );\n    } else {\n      return <h1>No Record Found</h1>;\n    }\n  };\n  //State methods to handle state of inputs\n  //Patient add form handler methods\n  onPatientIdHandle = event => {\n    const re = /^[0-9\\b]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ patientId: event.target.value });\n    }\n  };\n  onPatientHandle = event => {\n    const re = /^[A-Za-z ]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ patientName: event.target.value });\n    }\n  };\n\n  onGenderPatientHandle = (event, { value }) => {\n    this.setState({ patientGender: value });\n    console.log(this.state.patientGender);\n  };\n\n  onAgeHandle = event => {\n    const re = /^[0-9\\b]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ patientAge: event.target.value });\n    }\n  };\n\n  //Doctor form handler mathodes\n  onDoctorIdHandle = event => {\n    const re = /^[0-9\\b]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ doctorId: event.target.value });\n    }\n  };\n  onDoctorHandle = event => {\n    const re = /^[A-Za-z ]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ doctorName: event.target.value });\n    }\n  };\n\n  onQualificationHandle = event => {\n    const re = /^[A-Za-z ]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ doctorQualification: event.target.value });\n    }\n  };\n\n  onGenderDoctorHandle = (event, { value }) => {\n    this.setState({ doctorGender: value });\n  };\n\n  onAppointmentId = event => {\n    const re = /^[0-9\\b]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ appointmentId: event.target.value });\n    }\n    //console.log(this.state.app);\n  };\n  onPatientAccountHandle = event => {\n    this.setState({ patientAccount: event.target.value });\n  };\n  onDoctorAccountHandle = event => {\n    this.setState({ doctorAccount: event.target.value });\n  };\n  onTextArea = event => {\n    this.setState({ textArea: event.target.value });\n    console.log(this.state.textArea);\n  };\n\n  handlePatientChange = (e, { value }) => {\n    //  console.log(value);\n    this.setState({ currentPatientValue: value });\n    console.log(this.state.currentPatientValue);\n  };\n\n  handleDoctorChange = (e, { value }) => {\n    //  console.log(value);\n    this.setState({ currentDoctorValue: value });\n    console.log(this.state.currentDoctorValue);\n  };\n\n  onAppointmentIdSearch = event => {\n    const re = /^[0-9\\b]+$/;\n    if (event.target.value === \"\" || re.test(event.target.value)) {\n      this.setState({ appointmentIdSearch: event.target.value });\n    }\n  };\n  //render methods to render jsx Components\n  renderDropDownPatient = patienId => {\n    const { currentPatientValue, patientIdArray } = this.state;\n\n    console.log(\"render maethod:\", this.state.patientIdArray);\n    const patientArray = this.state.patientIdArray.map((element, index) => {\n      //console.log(\"element:\", index, element.toNumber());\n      var element1 = element.toNumber().toString();\n      return {\n        key: index,\n        text: element1,\n        value: element1\n      };\n    });\n    // const options = patientArray.map((element1, index) => {\n    //   return { key: index, text: element1, value: element1 };\n    // });\n    // console.log(\"options :\", options);\n    // console.log(\"patient Array:\", patientArray);\n    //\n    // { key: index, text:element.toNumber() , value: element.toNumber() },\n    // { key: 2, text: \"Choice 2\", value: 2 },\n    // { key: 3, text: \"Choice 3\", value: 3 }\n    // ];\n    return (\n      <Dropdown\n        clearable\n        options={patientArray}\n        selection\n        search\n        required\n        value={currentPatientValue}\n        onChange={this.handlePatientChange}\n      />\n    );\n  };\n  renderDropDownDoctor = doctorId => {\n    const { currentDoctorValue } = this.state;\n    console.log(\"render maethod:\", this.state.doctorIdArray);\n    const doctorArray = this.state.doctorIdArray.map((element, index) => {\n      //console.log(\"element:\", index, element.toNumber());\n      var element1 = element.toNumber().toString();\n      return {\n        key: index,\n        text: element1,\n        value: element1\n      };\n    });\n    console.log(\"patient Array:\", doctorArray);\n    const options = [\n      { key: 1, text: \"Choice 1\", value: 1 },\n      { key: 2, text: \"Choice 2\", value: 2 },\n      { key: 3, text: \"Choice 3\", value: 3 }\n    ];\n    console.log(\"OPTIONS:\", options);\n    return (\n      <Dropdown\n        clearable\n        options={doctorArray}\n        selection\n        search\n        value={currentDoctorValue}\n        onChange={this.handleDoctorChange}\n      />\n    );\n  };\n\n  genderPatientRender = () => {\n    const options = [\n      { key: 1, text: \"Male\", value: \"Male\" },\n      { key: 2, text: \"Female\", value: \"Female\" },\n      { key: 3, text: \"Other\", value: \"Other\" }\n    ];\n    return (\n      <Dropdown\n        clearable\n        options={options}\n        selection\n        search\n        value={this.state.patientGender}\n        onChange={this.onGenderPatientHandle}\n      />\n    );\n  };\n\n  genderDoctorRender = () => {\n    const options = [\n      { key: 1, text: \"Male\", value: \"Male\" },\n      { key: 2, text: \"Female\", value: \"Female\" },\n      { key: 3, text: \"Other\", value: \"Other\" }\n    ];\n    return (\n      <Dropdown\n        clearable\n        options={options}\n        selection\n        search\n        value={this.state.doctorGender}\n        onChange={this.onGenderDoctorHandle}\n      />\n    );\n  };\n\n  renderTabs() {\n    const panes = [\n      {\n        menuItem: \"Add Patient\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Patient Information</h1>\n            <Form\n              onSubmit={this.addPatient}\n              error={!!this.state.errorMessagePatient}\n            >\n              <Form.Group widths=\"equal\">\n                <Form.Field required>\n                  <label>Patient ID</label>\n                  <Input\n                    value={this.state.patientId}\n                    onChange={this.onPatientIdHandle}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Patient Name</label>\n                  <Input\n                    value={this.state.patientName}\n                    onChange={this.onPatientHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Patient Gender</label>\n                  {this.genderPatientRender()}\n                </Form.Field>\n                <Form.Field>\n                  <label>Patient Age</label>\n                  <Input\n                    value={this.state.patientAge}\n                    onChange={this.onAgeHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n\n              <Form.Field required>\n                <label>Account</label>\n                <Input\n                  value={this.state.patientAccount}\n                  onChange={this.onPatientAccountHandle}\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops..!\"\n                content={this.state.errorMessagePatient}\n              />\n\n              <Button loading={this.state.loading} primary>\n                {\" \"}\n                Add Patient{\" \"}\n              </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Add Doctor\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Doctor Information</h1>\n\n            <Form\n              onSubmit={this.addDoctor}\n              error={!!this.state.errorMessageDoctor}\n            >\n              <Form.Group widths=\"equal\">\n                <Form.Field required>\n                  <label>Doctor ID</label>\n                  <Input\n                    value={this.state.doctorId}\n                    onChange={this.onDoctorIdHandle}\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Doctor Name</label>\n                  <Input\n                    value={this.state.doctorName}\n                    onChange={this.onDoctorHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Doctor Gender</label>\n                  {this.genderDoctorRender()}\n                </Form.Field>\n                <Form.Field>\n                  <label>Doctor Qualification</label>\n                  <Input\n                    value={this.state.doctorQualification}\n                    onChange={this.onQualificationHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Field required>\n                <label>Account</label>\n                <Input\n                  value={this.state.doctorAccount}\n                  onChange={this.onDoctorAccountHandle}\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops..!\"\n                content={this.state.errorMessageDoctor}\n              />\n              <Button loading={this.state.loading} primary>\n                {\" \"}\n                Add Doctor{\" \"}\n              </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Create Appointment\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Create Appointment</h1>\n            <Form\n              onSubmit={this.onAppointmentSubmit}\n              error={!!this.state.errorMessageAppointment}\n            >\n              <Form.Group widths=\"equal\">\n                <Form.Field required>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentId}\n                    onChange={this.onAppointmentId}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Appointment Date </label>\n                  <Input\n                    action={{\n                      color: \"teal\",\n                      icon: \"calendar\",\n                      onClick: () => this.setState({ dateTimeOpen: true })\n                    }}\n                    actionPosition=\"left\"\n                    value={moment(this.state.myDate).format(\"LLL\")}\n                    onClick={event =>\n                      this.setState({\n                        dateTimeOpen: true,\n                        myDate: event.target.value\n                      })\n                    }\n                    disabled={this.state.dateTimeOpen}\n                    fluid\n                  />\n                  {this.state.dateTimeOpen && (\n                    <DatetimePicker\n                      onChange={value => {\n                        this.setState({ myDate: value, dateTimeOpen: false });\n                        this.setState({\n                          date: moment(this.state.myDate).format(\"LLL\")\n                        });\n                      }}\n                      moment={this.myDate}\n                      time={true}\n                    />\n                  )}\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Patient ID</label>\n                  {this.renderDropDownPatient()}\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Doctor ID</label>\n                  {this.renderDropDownDoctor()}\n                </Form.Field>\n              </Form.Group>\n              <Form.Field>\n                <Form.TextArea\n                  label=\"Chep Complaint\"\n                  rows={2}\n                  placeholder=\"write patient disease...\"\n                  onChange={this.onTextArea}\n                />\n              </Form.Field>\n              <Message\n                error\n                header=\"Oops..!\"\n                content={this.state.errorMessageAppointment}\n              />\n              <Button loading={this.state.loading} primary>\n                {\" \"}\n                Create Appointment{\" \"}\n              </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Search Appointment\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Search Appointment</h1>\n            <Form onSubmit={this.onSearchAppointment}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentIdSearch}\n                    onChange={this.onAppointmentIdSearch}\n                  />\n                </Form.Field>\n\n                <Button primary> Search Appointment </Button>\n              </Form.Group>\n            </Form>\n            {this.onSearch()}\n          </Tab.Pane>\n        )\n      }\n    ];\n    return <Tab menu={{ attached: false }} panes={panes} />;\n  }\n\n  renderHospital() {\n    const { address, hospitalName, adminName, manager } = this.props;\n    return (\n      <div>\n        <div>Hospital Name: {hospitalName}</div>\n        <div>Admin Name: {adminName}</div>\n        <div>Account: {manager}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div>\n          <Button\n            floated=\"right\"\n            primary\n            content=\"Show admin View\"\n            onClick={this.onUnlockView}\n          />\n          <div style={{ marginLeft: 300 }}>\n            <h1>Hospital Details</h1>\n          </div>\n          <div\n            style={{\n              backgroundColor: \"#4267b2\",\n              color: \"white\",\n              marginTop: 10,\n              borderRadius: 4,\n              padding: 10,\n              paddingLeft: 50,\n              margin: 10,\n              fontFamily: \"Times New Roman, Times, serif\",\n              fontSize: 20\n            }}\n          >\n            {this.renderHospital()}\n          </div>\n        </div>\n        <hr />\n        <ToggleDisplay show={this.state.show}>\n          <h1 style={{ marginLeft: 300 }}>Admin Panel</h1>\n          {this.renderTabs()}\n          <hr />\n        </ToggleDisplay>\n        <ToggleDisplay show={!this.state.show}>\n          <div>\n            <h1 style={{ color: \"red\" }}>{this.state.notAdmin}</h1>\n          </div>\n        </ToggleDisplay>\n      </Layout>\n    );\n  }\n}\n\nexport default hospitalDetails;\n","const routes = require(\"next-routes\")();\nroutes\n  .add(\"/hospital/\", \"/hospital/\")\n  .add(\"/hospital/register\", \"/hospital/register\")\n  .add(\"/hospital/:address\", \"/hospital/hospitalDetails\")\n  .add(\"/patient\", \"/patient\")\n  .add(\"/patient/record/:hash\", \"/patient/record\")\n  .add(\"/doctor\", \"/doctor\")\n  .add(\"/doctor/patientRecord/:patientId\", \"/doctor/patientRecord\")\n  .add(\"/doctor/record/:hash\", \"/doctor/record\");\n\nmodule.exports = routes;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"moment\");","module.exports = require(\"next-routes\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-semantic-datetime\");","module.exports = require(\"react-toggle-display\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"truffle-contract\");","module.exports = require(\"web3\");"],"mappingsxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAFA;AAKA;AACA;AAFA;AAUA;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAGA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;AAjCA;AACA;AAkCA;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AACA;;;;;;AAqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AALA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","sourceRoot":""}