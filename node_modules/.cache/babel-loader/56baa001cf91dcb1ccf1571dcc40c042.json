{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/patientLayout\";\nimport ReceptionistFactory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Patient from \"../../build/contracts/Patient.json\";\nimport AppointmentRow from \"../../components/AppointmentRow\";\nimport truffleContract from \"truffle-contract\";\nimport { Card, Button, Tab, Form, Input, Dropdown, Table, Grid, Segment, Message } from \"semantic-ui-react\";\nimport Link from \"../../routes\";\nimport web3 from \"../../ethereum/web3\";\n\nvar patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(patient, _Component);\n\n  function patient() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, patient);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(patient)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      appointmentIdResult: \"\",\n      appointmentIdSearch: \"\",\n      patientIdResult: \"\",\n      doctorIdresult: \"\",\n      dateResult: \"\",\n      chepComplaintResult: \"\",\n      loading: false,\n      errorMessage: \"\",\n      doctorId: \"\",\n      loadingDis: false,\n      errorMessageDis: \"\",\n      doctorIdDis: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"checkApprovedDoctor\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var patient, doctorIdApproved;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              patient = _this.props.patient;\n              _context.next = 3;\n              return patient.doctorIdArray.call();\n\n            case 3:\n              doctorIdApproved = _context.sent;\n\n              _this.setState({\n                doctorIdForApprove: doctorIdApproved.toNumber()\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    })));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchAppointment\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var patient, appointmentResult;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                patient = _this.props.patient;\n                console.log(patient);\n                _context2.next = 5;\n                return patient.appointments.call(_parseInt(_this.state.appointmentIdSearch));\n\n              case 5:\n                appointmentResult = _context2.sent;\n                console.log(appointmentResult);\n\n                _this.setState({\n                  appointmentIdResult: appointmentResult[0].toNumber(),\n                  patientIdResult: appointmentResult[1].toNumber(),\n                  doctorIdresult: appointmentResult[2].toNumber(),\n                  dateResult: appointmentResult[3],\n                  chepComplaintResult: appointmentResult[4]\n                }); // console.log(this.state.appointmentResult);\n\n\n                _this.onSearch();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearch\", function () {\n      if (_this.state.appointmentIdResult) {\n        return React.createElement(Table, {\n          singleLine: true\n        }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Appointement Id\"), React.createElement(Table.HeaderCell, null, \"Patient Id\"), React.createElement(Table.HeaderCell, null, \"Doctor Id\"), React.createElement(Table.HeaderCell, null, \"Date\"), React.createElement(Table.HeaderCell, null, \"Chief Complaint\"))), React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, null, _this.state.appointmentIdResult), React.createElement(Table.Cell, null, _this.state.patientIdResult), React.createElement(Table.Cell, null, _this.state.doctorIdresult), React.createElement(Table.Cell, null, _this.state.dateResult), React.createElement(Table.Cell, null, _this.state.chepComplaintResult))));\n      } else {\n        return React.createElement(\"h1\", null, \"No Record Found\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentIdSearch\", function (event) {\n      _this.setState({\n        appointmentIdSearch: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDoctorId\", function (event) {\n      _this.setState({\n        doctorId: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDoctorIdDis\", function (event) {\n      _this.setState({\n        doctorIdDis: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSumbitApproval\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var patient, isPresent, doctorIdApproved;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n                patient = _this.props.patient;\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: \"\"\n                });\n\n                console.log(patient);\n                _context3.next = 6;\n                return patient.doctorApproval.call(_this.state.doctorId);\n\n              case 6:\n                isPresent = _context3.sent;\n                console.log(isPresent);\n\n                if (isPresent) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.prev = 9;\n                _context3.next = 12;\n                return patient.addDoctorApproval(_this.state.doctorId, {\n                  from: _this.props.account\n                });\n\n              case 12:\n                alert(_this.state.doctorId + \"is Approved to view Your Record\");\n                _context3.next = 15;\n                return patient.doctorIdArray.call();\n\n              case 15:\n                doctorIdApproved = _context3.sent;\n\n                _this.setState({\n                  doctorIdForApprove: doctorIdApproved.toNumber()\n                });\n\n                console.log(_this.state.doctorIdForApprove);\n                _context3.next = 24;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t0 = _context3[\"catch\"](9);\n                console.log(\"Error of try:\", _context3.t0);\n\n                _this.setState({\n                  errorMessage: _context3.t0.message\n                });\n\n              case 24:\n                _context3.next = 27;\n                break;\n\n              case 26:\n                alert(\"Already Approved\");\n\n              case 27:\n                _this.setState({\n                  loading: false\n                });\n\n              case 28:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 20]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSumbitDisapprove\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var patient, isPresent, doctorIdApproved;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault();\n                patient = _this.props.patient;\n\n                _this.setState({\n                  loadingDis: true,\n                  errorMessageDis: \"\"\n                });\n\n                console.log(patient);\n                _context4.next = 6;\n                return patient.doctorApproval.call(_this.state.doctorIdDis);\n\n              case 6:\n                isPresent = _context4.sent;\n                console.log(isPresent);\n\n                if (!isPresent) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                console.log(_this.state.doctorIdDis);\n                _context4.prev = 10;\n                _context4.next = 13;\n                return patient.blockDoctor(_this.state.doctorIdDis, {\n                  from: _this.props.account,\n                  gas: \"100000\"\n                });\n\n              case 13:\n                alert(_this.state.doctorIdDis + \"is disApproved to view Your Record\");\n                _context4.next = 16;\n                return patient.doctorIdArray.call();\n\n              case 16:\n                doctorIdApproved = _context4.sent;\n\n                _this.setState({\n                  doctorIdForApprove: doctorIdApproved.toNumber()\n                });\n\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](10);\n                console.log(\"Error of try:\", _context4.t0);\n\n                _this.setState({\n                  errorMessageDis: _context4.t0.message\n                });\n\n              case 24:\n                _context4.next = 27;\n                break;\n\n              case 26:\n                alert(\"Already DisApproved\");\n\n              case 27:\n                _this.setState({\n                  loadingDis: false\n                });\n\n              case 28:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[10, 20]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(patient, [{\n    key: \"renderRow\",\n    value: function renderRow() {\n      var _this2 = this;\n\n      return this.props.appointmentListData.map(function (appointment, index) {\n        return React.createElement(AppointmentRow, {\n          key: index,\n          appointment: appointment,\n          address: _this2.props.patientAddress\n        });\n      });\n    }\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this3 = this;\n\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      var panes = [{\n        menuItem: \"View Record\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Patient Record of Health-care\"), React.createElement(Table, null, React.createElement(Header, null, React.createElement(Row, null, React.createElement(HeaderCell, null, \"Appointment ID\"), React.createElement(HeaderCell, null, \"Patient ID\"), React.createElement(HeaderCell, null, \"Doctor ID\"), React.createElement(HeaderCell, null, \"Date\"), React.createElement(HeaderCell, null, \"Chief Complaint\"), React.createElement(HeaderCell, null, \" Hash\"))), React.createElement(Body, null, _this3.renderRow())));\n        }\n      }, {\n        menuItem: \"Search Appointment\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Search Appointment\"), React.createElement(Form, {\n            onSubmit: _this3.onSearchAppointment\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Appointment Id\"), React.createElement(Input, {\n            value: _this3.state.appointmentIdSearch,\n            onChange: _this3.onAppointmentIdSearch\n          })), React.createElement(Button, {\n            primary: true\n          }, \" Search Appointment \"))), _this3.onSearch());\n        }\n      }, {\n        menuItem: \"Approve/DisApprove Doctor\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(Grid, {\n            columns: 2,\n            divided: true\n          }, React.createElement(Grid.Row, {\n            stretched: true\n          }, React.createElement(Grid.Column, null, React.createElement(Segment, null, React.createElement(\"h1\", null, \"Approve Doctor\"), React.createElement(Form, {\n            onSubmit: _this3.onSumbitApproval,\n            error: !!_this3.state.errorMessage\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor Id\"), React.createElement(Input, {\n            value: _this3.state.doctorId,\n            onChange: _this3.onDoctorId\n          })), React.createElement(Message, {\n            error: true,\n            header: \"Oops..!\",\n            content: _this3.state.errorMessage\n          }), React.createElement(Button, {\n            loading: _this3.state.loading,\n            primary: true\n          }, \" \", \"Approve Doctor\", \" \")))), React.createElement(Grid.Column, null, React.createElement(Segment, null, React.createElement(\"h1\", null, \"DisApprove Doctor\"), React.createElement(Form, {\n            onSubmit: _this3.onSumbitDisapprove,\n            error: !!_this3.state.errorMessageDis\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor Id\"), React.createElement(Input, {\n            value: _this3.state.doctorIdDis,\n            onChange: _this3.onDoctorIdDis\n          })), React.createElement(Message, {\n            error: true,\n            header: \"Oops..!\",\n            content: _this3.state.errorMessageDis\n          }), React.createElement(Button, {\n            loading: _this3.state.loadingDis,\n            primary: true\n          }, \" \", \"disApprove Doctor\", \" \")))))), \" \", React.createElement(\"br\", null), React.createElement(Button, {\n            onClick: _this3.checkApprovedDoctor\n          }, \" \", \"check approved doctor Number\"), React.createElement(\"p\", {\n            style: {\n              color: \"red\"\n            }\n          }, \"Number of Doctor Approved: \", _this3.state.doctorIdForApprove));\n        }\n      }];\n      return React.createElement(Tab, {\n        menu: {\n          attached: false\n        },\n        panes: panes\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.patientAddress === null) {\n        return React.createElement(Layout, null, React.createElement(\"div\", {\n          style: {\n            color: \"red\"\n          }\n        }, React.createElement(\"h1\", null, \"You are not Registered as Patient or you have selected wrong account in metamask\")));\n      } else {\n        return React.createElement(Layout, null, React.createElement(\"div\", null, React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#4267b2\",\n            color: \"white\",\n            marginTop: 10,\n            borderRadius: 4,\n            padding: 10,\n            paddingLeft: 50,\n            margin: 10,\n            fontFamily: \"Times New Roman, Times, serif\",\n            fontSize: 20\n          }\n        }, React.createElement(\"div\", null, \"Patient Name: \", this.props.patientName), React.createElement(\"div\", null, \"Patient Id:\", this.props.patientId), React.createElement(\"div\", null, \"Patient Gender:\", this.props.patientGender), React.createElement(\"div\", null, \"Patient Age:\", this.props.patientAge), React.createElement(\"div\", null, \"Patient Account: \", this.props.patientAccount))), React.createElement(\"div\", null, this.renderTabs()));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var accounts, factory, instanceFactory, patient, patientAddress, patientContract, patientId, summary, appointmentList, appointmentListData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                console.log(accounts[0]);\n                factory = truffleContract(ReceptionistFactory);\n                factory.setProvider(web3.currentProvider);\n                _context6.next = 8;\n                return factory.deployed();\n\n              case 8:\n                instanceFactory = _context6.sent;\n                console.log(instanceFactory);\n                patient = truffleContract(Patient);\n                patient.setProvider(web3.currentProvider);\n                _context6.next = 14;\n                return instanceFactory.accountToAddressPatient.call(accounts[0]);\n\n              case 14:\n                patientAddress = _context6.sent;\n                console.log(patientAddress);\n\n                if (!(patientAddress == 0x0000000000000000000000000000000000000000)) {\n                  _context6.next = 21;\n                  break;\n                }\n\n                alert(\"Sorry check your account or contact with authorized person\");\n                return _context6.abrupt(\"return\", {\n                  patientAddress: null\n                });\n\n              case 21:\n                _context6.next = 23;\n                return patient.at(patientAddress);\n\n              case 23:\n                patientContract = _context6.sent;\n                console.log(\"patient address :\", patientContract);\n                _context6.next = 27;\n                return patientContract.patientId.call();\n\n              case 27:\n                patientId = _context6.sent;\n                _context6.next = 30;\n                return patientContract.getSummary.call(patientId);\n\n              case 30:\n                summary = _context6.sent;\n                console.log(summary);\n                _context6.next = 34;\n                return patientContract.getAppointmentList.call();\n\n              case 34:\n                appointmentList = _context6.sent;\n                console.log(appointmentList);\n                _context6.next = 38;\n                return _Promise.all(Array(_parseInt(appointmentList)).fill().map(\n                /*#__PURE__*/\n                function () {\n                  var _ref5 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee5(element, index) {\n                    var appointmentId;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return patientContract.appointmentsList.call(index);\n\n                          case 2:\n                            appointmentId = _context5.sent;\n                            return _context5.abrupt(\"return\", patientContract.appointments.call(appointmentId));\n\n                          case 4:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, this);\n                  }));\n\n                  return function (_x4, _x5) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n\n              case 38:\n                appointmentListData = _context6.sent;\n                console.log(\"Appointment Data:\", appointmentListData);\n                return _context6.abrupt(\"return\", {\n                  patient: patientContract,\n                  appointmentListData: appointmentListData,\n                  account: accounts[0],\n                  patientId: summary[0].toNumber(),\n                  patientName: summary[1],\n                  patientGender: summary[2],\n                  patientAge: summary[3].toNumber(),\n                  patientAccount: summary[4],\n                  patientAddress: patientAddress\n                });\n\n              case 41:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return patient;\n}(Component);\n\nexport default patient;","map":null,"metadata":{},"sourceType":"module"}