{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/doctorLayout\";\nimport web3 from \"../../ethereum/web3\";\nimport Factory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Doctor from \"../../build/contracts/Doctor.json\";\nimport Patient from \"../../build/contracts/Patient.json\";\nimport AppointmentRow from \"../../components/AppointmentRow\";\nimport { Link } from \"../../routes\";\nimport truffleContract from \"truffle-contract\";\nimport { Card, Button, Tab, Form, Input, Dropdown, Table, Message } from \"semantic-ui-react\";\nimport ipfs from \"../ipfs\";\n\nvar doctor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(doctor, _Component);\n\n  function doctor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, doctor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(doctor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      appointmentIdResult: \"\",\n      appointmentIdSearch: \"\",\n      patientIdResult: \"\",\n      doctorIdresult: \"\",\n      dateResult: \"\",\n      chepComplaintResult: \"\",\n      appointmentIdForFile: \"\",\n      isCheckTrue: false,\n      buffer: \"\",\n      errorMessage: \"\",\n      loading: false,\n      patientId: \"\",\n      instancePatient: \"\",\n      appointmentListData: \"\",\n      doctorApproved: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentIdForFile\", function (e) {\n      var re = /^[0-9\\b]+$/;\n\n      if (e.target.value === \"\" || re.test(e.target.value)) {\n        _this.setState({\n          appointmentIdForFile: e.target.value\n        });\n      }\n\n      console.log(_this.state.appointmentIdForFile);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPatientId\", function (e) {\n      var re = /^[0-9\\b]+$/;\n\n      if (e.target.value === \"\" || re.test(e.target.value)) {\n        _this.setState({\n          patientId: e.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentIdSearch\", function (event) {\n      _this.setState({\n        appointmentIdSearch: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchAppointment\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var doctor, appointmentResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                doctor = _this.props.doctor;\n                console.log(doctor);\n                _context.next = 5;\n                return doctor.appointments.call(_parseInt(_this.state.appointmentIdSearch));\n\n              case 5:\n                appointmentResult = _context.sent;\n                console.log(appointmentResult);\n\n                _this.setState({\n                  appointmentIdResult: appointmentResult[0].toNumber(),\n                  patientIdResult: appointmentResult[1].toNumber(),\n                  doctorIdresult: appointmentResult[2].toNumber(),\n                  dateResult: appointmentResult[3],\n                  chepComplaintResult: appointmentResult[4]\n                });\n\n                _this.onSearch();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearch\", function () {\n      if (_this.state.appointmentIdResult) {\n        return React.createElement(Table, {\n          singleLine: true\n        }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Appointement Id\"), React.createElement(Table.HeaderCell, null, \"Patient Id\"), React.createElement(Table.HeaderCell, null, \"Doctor Id\"), React.createElement(Table.HeaderCell, null, \"Date\"), React.createElement(Table.HeaderCell, null, \"Chief Complaint\"))), React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, null, _this.state.appointmentIdResult), React.createElement(Table.Cell, null, _this.state.patientIdResult), React.createElement(Table.Cell, null, _this.state.doctorIdresult), React.createElement(Table.Cell, null, _this.state.dateResult), React.createElement(Table.Cell, null, _this.state.chepComplaintResult))));\n      } else {\n        return React.createElement(\"h1\", null, \"No Record Found\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAddPrescriptionSearch\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var appointmentIdForFile, doctor, appointment, isCheckTrue;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              appointmentIdForFile = _this.state.appointmentIdForFile;\n              doctor = _this.props.doctor;\n              _context2.next = 4;\n              return doctor.appointments.call(appointmentIdForFile);\n\n            case 4:\n              appointment = _context2.sent;\n              isCheckTrue = appointment[6];\n\n              if (appointment[0].toNumber() == 0 || isNaN(appointment[0].toNumber())) {\n                alert(\"please provide right Appointment Id\");\n              } else {\n                _this.setState({\n                  appointmentIdForFile: appointment[0].toNumber(),\n                  isCheckTrue: isCheckTrue\n                });\n\n                console.log(_this.state.isCheckTrue, _this.state.appointmentIdForFile);\n\n                _this.renderFile();\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    })));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var _doctor, appointment, isCheckTrue, _appointment;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: \"\"\n                });\n\n                console.log(_this.state.appointmentIdForFile);\n                _doctor = _this.props.doctor;\n                _context4.next = 6;\n                return _doctor.appointments.call(_this.state.appointmentIdForFile);\n\n              case 6:\n                appointment = _context4.sent;\n                isCheckTrue = appointment[6];\n                console.log(isCheckTrue);\n\n                if (!(isCheckTrue || _this.state.appointmentIdForFile == 0)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", alert(\"Sorry provide valid appointment Id\"));\n\n              case 13:\n                ipfs.files.add(_this.state.buffer,\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(error, result) {\n                    var prescription;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (!error) {\n                              _context3.next = 4;\n                              break;\n                            }\n\n                            console.error(error);\n\n                            _this.setState({\n                              errorMessage: error.message\n                            });\n\n                            return _context3.abrupt(\"return\");\n\n                          case 4:\n                            _this.setState({\n                              loading: false\n                            }); // const ethAddress = instance.address;\n                            // this.setState({ ethAddress });\n\n\n                            _context3.next = 7;\n                            return _doctor.addPrescription(_this.state.appointmentIdForFile, result[0].hash, {\n                              from: _this.props.accounts[0]\n                            });\n\n                          case 7:\n                            prescription = _context3.sent;\n\n                          case 8:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x3, _x4) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n                _context4.next = 16;\n                return _doctor.appointments.call(_this.state.appointmentIdForFile);\n\n              case 16:\n                _appointment = _context4.sent;\n                console.log(_appointment);\n\n              case 18:\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(error);\n\n                _this.setState({\n                  errorMessage: _context4.t0.message\n                });\n\n              case 24:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 20]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSumbitPatientId\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(event) {\n        var instanceFactory, patient, patientAddress, instancePatient, checkDoctorId;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                event.preventDefault();\n                instanceFactory = _this.props.instanceFactory;\n                patient = _this.props.patient;\n                _context5.next = 5;\n                return instanceFactory.patientIdToAddress.call(_parseInt(_this.state.patientId));\n\n              case 5:\n                patientAddress = _context5.sent;\n\n                if (patientAddress == 0x0000000000000000000000000000000000000000) {\n                  alert(\"sorry wrong patient id\");\n                }\n\n                _context5.next = 9;\n                return patient.at(patientAddress);\n\n              case 9:\n                instancePatient = _context5.sent;\n                _context5.next = 12;\n                return instancePatient.doctorApproval.call(_this.props.doctorId);\n\n              case 12:\n                checkDoctorId = _context5.sent;\n\n                if (checkDoctorId) {\n                  _this.setState({\n                    doctorApproved: true\n                  });\n                } else {\n                  alert(\"Sorry you are not allowed to view patient record\");\n                }\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"captureFile\", function (event) {\n      event.preventDefault();\n\n      try {\n        var file = event.target.files[0];\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n\n        reader.onloadend = function () {\n          _this.setState({\n            buffer: Buffer(reader.result)\n          });\n\n          console.log(\"buffer:\", _this.state.buffer);\n        };\n      } catch (err) {\n        _this.setState({\n          errorMessage: err.message\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderFile\", function () {\n      console.log(\"render file:\", _this.state.isCheckTrue); // console.log(\"address\", this.props.);\n\n      if (!_this.state.isCheckTrue) {\n        return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"Please Add File\"), React.createElement(Form, {\n          onSubmit: _this.onSubmit,\n          error: !!_this.state.errorMessage\n        }, React.createElement(Form.Group, {\n          widths: \"equal\"\n        }, React.createElement(Input, {\n          type: \"file\",\n          onChange: _this.captureFile,\n          style: {\n            width: 800,\n            height: 40,\n            opacity: 100\n          }\n        }), React.createElement(Button, {\n          loading: _this.state.loading,\n          primary: true,\n          icon: \"upload\",\n          label: {\n            basic: true,\n            content: \"upload file\"\n          },\n          labelPosition: \"right\"\n        })), React.createElement(Message, {\n          error: true,\n          header: \"Oops..!\",\n          content: _this.state.errorMessage\n        })));\n      } else {\n        return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"already Completed\"));\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(doctor, [{\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this2 = this;\n\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      var patientId = this.state.patientId;\n      var panes = [{\n        menuItem: \"Add File of Visit\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Add File of Appointment\"), React.createElement(\"h1\", null, \"Search Appointment\"), React.createElement(Form, {\n            onSubmit: _this2.onAddPrescriptionSearch\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Appointment Id\"), React.createElement(Input, {\n            value: _this2.state.appointmentIdForFile,\n            onChange: _this2.onAppointmentIdForFile\n          })), React.createElement(Button, {\n            primary: true\n          }, \" Search Appointment \"))), _this2.renderFile(_this2.state.appointmentIdForFile, _this2.state.isCheckTrue));\n        }\n      }, {\n        menuItem: \"Search Appointment\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Search Appointment\"), React.createElement(Form, {\n            onSubmit: _this2.onSearchAppointment\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Appointment Id\"), React.createElement(Input, {\n            value: _this2.state.appointmentIdSearch,\n            onChange: _this2.onAppointmentIdSearch\n          })), React.createElement(Button, {\n            primary: true\n          }, \" Search Appointment \"))), _this2.onSearch());\n        }\n      }, {\n        menuItem: \"View Patient Record\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"View Patient Record\"), React.createElement(Form, {\n            onSubmit: _this2.onSumbitPatientId\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Patient id\"), React.createElement(Input, {\n            value: _this2.state.patientId,\n            onChange: _this2.onPatientId\n          })), React.createElement(Button, {\n            primary: true\n          }, \" View record \"))), \" \", React.createElement(\"b\", null, _this2.state.doctorApproved ? React.createElement(Link, {\n            route: \"../doctor/patientRecord/\".concat(patientId)\n          }, React.createElement(\"a\", null, \"View Patient Record\")) : \"Sorry you are not allowed\"));\n        }\n      }];\n      return React.createElement(Tab, {\n        menu: {\n          attached: false\n        },\n        panes: panes\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.doctorAddress !== null) {\n        return React.createElement(Layout, null, React.createElement(\"div\", null, React.createElement(\"div\", {\n          style: {\n            backgroundColor: \"#4267b2\",\n            color: \"white\",\n            marginTop: 10,\n            borderRadius: 4,\n            padding: 10,\n            paddingLeft: 50,\n            margin: 10,\n            fontFamily: \"Times New Roman, Times, serif\",\n            fontSize: 20\n          }\n        }, React.createElement(\"div\", null, \"Doctor Id: \", this.props.doctorId), React.createElement(\"div\", null, \" Doctor Name : \", this.props.doctorName), React.createElement(\"div\", null, \"Gender: \", this.props.doctorGender), React.createElement(\"div\", null, \"Qualification: \", this.props.qualification), React.createElement(\"div\", null, \" Account: \", this.props.account)), this.renderTabs()));\n      } else {\n        return React.createElement(Layout, null, React.createElement(\"div\", {\n          style: {\n            color: \"red\"\n          }\n        }, React.createElement(\"h1\", null, \"You are not Registered as Doctor or you have selected wrong account in metamask\")));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var accounts, factory, instanceFactory, doctor, patient, doctorAddress, instanceDoctor, doctorId, summary;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                console.log(accounts[0]);\n                factory = truffleContract(Factory);\n                factory.setProvider(web3.currentProvider);\n                _context6.next = 8;\n                return factory.deployed();\n\n              case 8:\n                instanceFactory = _context6.sent;\n                doctor = truffleContract(Doctor);\n                patient = truffleContract(Patient);\n                patient.setProvider(web3.currentProvider);\n                doctor.setProvider(web3.currentProvider);\n                _context6.next = 15;\n                return instanceFactory.accountToAddressDoctor.call(accounts[0]);\n\n              case 15:\n                doctorAddress = _context6.sent;\n\n                if (!(doctorAddress == 0x0000000000000000000000000000000000000000)) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  doctorAddress: null\n                });\n\n              case 20:\n                _context6.next = 22;\n                return doctor.at(doctorAddress);\n\n              case 22:\n                instanceDoctor = _context6.sent;\n                _context6.next = 25;\n                return instanceDoctor.doctorId.call();\n\n              case 25:\n                doctorId = _context6.sent;\n                _context6.next = 28;\n                return instanceDoctor.getSummary.call(doctorId);\n\n              case 28:\n                summary = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  patient: patient,\n                  doctorAddress: doctorAddress,\n                  doctor: instanceDoctor,\n                  instanceFactory: instanceFactory,\n                  doctorId: summary[0].toNumber(),\n                  doctorName: summary[1],\n                  doctorGender: summary[2],\n                  qualification: summary[3],\n                  account: summary[4],\n                  accounts: accounts\n                });\n\n              case 30:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return doctor;\n}(Component);\n\nexport default doctor;","map":null,"metadata":{},"sourceType":"module"}