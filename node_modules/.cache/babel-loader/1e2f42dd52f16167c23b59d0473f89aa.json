{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ToggleDisplay from \"react-toggle-display\";\nimport ReceptionsitFactory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Receptionist from \"../../build/contracts/Receptionsit.json\"; //import PatientFactory from \"../../build/contracts/PatientFactory.json\";\n\nimport Patient from \"../../build/contracts/Patient.json\"; //import DoctorFactory from \"../../build/contracts/DoctorFactory.json\";\n\nimport Doctor from \"../../build/contracts/Doctor.json\";\nimport { Card, Button, Tab, Form, Input, Dropdown, Table, Message } from \"semantic-ui-react\";\nimport DatetimePicker from \"react-semantic-datetime\";\nimport moment from \"moment\"; //for date picker\n\nimport { BigNumber } from \"bignumber.js\";\nimport { Link } from \"../../routes\";\nimport getWeb3 from \"../../ethereum/getWeb3\";\nimport web3 from \"../../ethereum/web3\";\nimport truffleContract from \"truffle-contract\";\nimport Layout from \"../../components/Layout\"; // import Dropdown from \"react-dropdown\";\n// import \"../style.css\";\n\nvar hospitalDetails =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(hospitalDetails, _Component);\n\n  function hospitalDetails() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, hospitalDetails);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(hospitalDetails)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      show: false,\n      patientName: \"\",\n      patientAge: \"\",\n      patientGender: \"\",\n      patientId: \"\",\n      doctorName: \"\",\n      doctorGender: \"\",\n      doctorQualification: \"\",\n      doctorId: \"\",\n      appointmentId: \"\",\n      patientAccount: \"\",\n      doctorAccount: \"\",\n      textArea: \"\",\n      currentPatientValue: \"\",\n      currentDoctorValue: \"\",\n      notAdmin: \"\",\n      date: moment(),\n      date1: \"\",\n      dateTimeOpen: false,\n      patientIdArray: null,\n      doctorIdArray: null,\n      appointmentIdResult: \"\",\n      appointmentIdSearch: \"\",\n      patientIdResult: \"\",\n      doctorIdresult: \"\",\n      dateResult: \"\",\n      chepComplaintResult: \"\",\n      errorMessagePatient: \"\",\n      errorMessageDoctor: \"\",\n      errorMessageAppointment: \"\",\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onUnlockView\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var admin, accounts, Factory, factoryInstance, patientList, doctorList;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"Clicked\"); //const web3 = await getWeb3();\n\n                console.log(\"web3:\", web3);\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                console.log(\"account at index:\", _this.props.manager);\n                console.log(\"account in metamask\", accounts);\n                Factory = truffleContract(ReceptionsitFactory); //  console.log(Factory);\n\n                Factory.setProvider(web3.currentProvider);\n                console.log(Factory);\n                _context.next = 13;\n                return Factory.deployed();\n\n              case 13:\n                factoryInstance = _context.sent;\n                _context.next = 16;\n                return factoryInstance.getPatientList.call();\n\n              case 16:\n                patientList = _context.sent;\n\n                _this.setState({\n                  patientIdArray: patientList\n                });\n\n                _this.preparePatientDropDown();\n\n                _context.next = 21;\n                return factoryInstance.getDoctorList.call();\n\n              case 21:\n                doctorList = _context.sent;\n\n                _this.setState({\n                  doctorIdArray: doctorList\n                });\n\n                _this.prepareDoctorDropdown();\n\n                if (_this.props.manager === accounts[0]) {\n                  _this.setState({\n                    show: !_this.state.show\n                  });\n\n                  console.log(\"ISADMIn:\", _this.state.show);\n                } else {\n                  _this.setState({\n                    show: false\n                  });\n\n                  _this.setState({\n                    notAdmin: \"you are not admin or you have selected Wrong account in Metamask please check\"\n                  });\n\n                  console.log(\"ISADMIn:\", _this.state.show);\n                }\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addPatient\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var Factory, Contract, factoryInstance, accounts, result, patientinstanceAddress, patientInstance, summary;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //const { patientFactoryInstance } = this.props;\n              Factory = truffleContract(ReceptionsitFactory); //  console.log(Factory);\n\n              Factory.setProvider(web3.currentProvider);\n              console.log(Factory); //PatinentContract;\n\n              Contract = truffleContract(Patient); //console.log(Contract);\n\n              Contract.setProvider(web3.currentProvider); //  console.log(Contract);\n\n              _context2.next = 7;\n              return Factory.deployed();\n\n            case 7:\n              factoryInstance = _context2.sent;\n              console.log(\"RESULT:\", factoryInstance.address);\n\n              if (!(_this.state.patientId == \"\" || _this.state.patientId == 1 || _this.state.patientAccount == \"\" || _this.state.patientAccount == 0)) {\n                _context2.next = 13;\n                break;\n              }\n\n              alert(\"Please provide patient id and account\");\n              _context2.next = 42;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.next = 16;\n              return web3.eth.getAccounts();\n\n            case 16:\n              accounts = _context2.sent;\n\n              _this.setState({\n                loading: true,\n                errorMessagePatient: \"\"\n              });\n\n              _context2.next = 20;\n              return factoryInstance.addPatient( // 1,\n              // \"Aman\",\n              // \"Male\",\n              // 24,\n              // accounts[0],\n              _this.state.patientId, _this.state.patientName, _this.state.patientGender, _this.state.patientAge, _this.state.patientAccount, {\n                from: accounts[0]\n              });\n\n            case 20:\n              result = _context2.sent;\n              alert(\"Patient Added Successfully\");\n              console.log(\"RESULT:\", result);\n              _context2.next = 29;\n              break;\n\n            case 25:\n              _context2.prev = 25;\n              _context2.t0 = _context2[\"catch\"](13);\n              console.error(_context2.t0);\n\n              _this.setState({\n                errorMessagePatient: _context2.t0.message\n              });\n\n            case 29:\n              _this.setState({\n                loading: false\n              });\n\n              _context2.next = 32;\n              return factoryInstance.patientIdToAddress.call(_this.state.patientId);\n\n            case 32:\n              patientinstanceAddress = _context2.sent;\n              _context2.next = 35;\n              return Contract.at(patientinstanceAddress);\n\n            case 35:\n              patientInstance = _context2.sent;\n              _context2.next = 38;\n              return patientInstance.getSummary.call(_this.state.patientId);\n\n            case 38:\n              summary = _context2.sent;\n              console.log(\"summary:\", summary);\n              console.log(\"address of patient:\", patientinstanceAddress);\n\n              _this.preparePatientDropDown();\n\n            case 42:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[13, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addDoctor\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var Factory, factoryInstance, accounts, result, doctorInstanceAddress, doctorList;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Factory = truffleContract(ReceptionsitFactory); //  console.log(Factory);\n\n                Factory.setProvider(web3.currentProvider);\n                _context3.next = 4;\n                return Factory.deployed();\n\n              case 4:\n                factoryInstance = _context3.sent;\n\n                if (!(_this.state.doctorId == \"\" || _this.state.doctorId == 2 || _this.state.doctorAccount == \"\" || _this.state.doctorAccount == 0)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                alert(\"Please provide doctor id and account\");\n                _context3.next = 35;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.next = 12;\n                return web3.eth.getAccounts();\n\n              case 12:\n                accounts = _context3.sent;\n\n                _this.setState({\n                  loading: true,\n                  errorMessageDoctor: \"\"\n                });\n\n                _context3.next = 16;\n                return factoryInstance.addDoctor( // 1,\n                // \"Aman\",\n                // \"Male\",\n                // 24,\n                // accounts[0],\n                _this.state.doctorId, _this.state.doctorName, _this.state.doctorGender, _this.state.doctorQualification, _this.state.doctorAccount, {\n                  from: accounts[0]\n                });\n\n              case 16:\n                result = _context3.sent;\n                alert(\"Doctor Added Successfully\");\n                console.log(\"RESULT:\", result);\n                _context3.next = 25;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](9);\n                console.error(_context3.t0);\n\n                _this.setState({\n                  errorMessageDoctor: _context3.t0.message\n                });\n\n              case 25:\n                _this.setState({\n                  loading: false\n                });\n\n                _context3.next = 28;\n                return factoryInstance.doctorIdToAddress.call(_this.state.doctorId);\n\n              case 28:\n                doctorInstanceAddress = _context3.sent;\n                _context3.next = 31;\n                return factoryInstance.getDoctorList.call();\n\n              case 31:\n                doctorList = _context3.sent;\n                console.log(\"doctorlist:\", doctorList.length); //  const patientFactoryInstance = await Factory.deployed();\n\n                console.log(\"address of Doctor:\", doctorInstanceAddress);\n\n                _this.prepareDoctorDropdown();\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 21]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var accounts, ContractFactory, instanceFactory, date;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                console.log(_this.state.currentPatientValue);\n                console.log(_this.state.currentDoctorValue);\n                console.log(_this.state.date1);\n                console.log(_this.state.date);\n                console.log(moment(_this.state.myDate).format(\"LLL\"));\n                console.log(_this.state.appointmentId);\n                console.log(_this.state.textArea);\n                _context4.next = 9;\n                return web3.eth.getAccounts();\n\n              case 9:\n                accounts = _context4.sent;\n                ContractFactory = truffleContract(ReceptionsitFactory);\n                ContractFactory.setProvider(web3.currentProvider);\n                _context4.next = 14;\n                return ContractFactory.deployed();\n\n              case 14:\n                instanceFactory = _context4.sent;\n                console.log(_this.props.address);\n                date = moment(_this.state.muDate).format(\"LLL\");\n\n                if (!(_this.state.appointmentId == \"\")) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                alert(\"please provide appointementId\");\n                _context4.next = 33;\n                break;\n\n              case 21:\n                _context4.prev = 21;\n\n                _this.setState({\n                  loading: true,\n                  errorMessageAppointment: \"\"\n                });\n\n                _context4.next = 25;\n                return instanceFactory.createAppointment(_this.state.appointmentId, _this.state.currentPatientValue, _this.state.currentDoctorValue, moment(_this.state.myDate).format(\"LLL\"), _this.state.textArea, // 123,\n                // 456,\n                // 567,\n                // \"12/14/2018\",\n                // \"fhklolp\",\n                {\n                  from: accounts[0]\n                });\n\n              case 25:\n                alert(\"Appointment Created  and appointment Id :\" + _this.state.appointmentId + \"Date of appintment is :\" + date);\n                _context4.next = 32;\n                break;\n\n              case 28:\n                _context4.prev = 28;\n                _context4.t0 = _context4[\"catch\"](21);\n                console.error(_context4.t0);\n\n                _this.setState({\n                  errorMessageAppointment: _context4.t0.message\n                });\n\n              case 32:\n                _this.setState({\n                  loading: false\n                });\n\n              case 33:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[21, 28]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchAppointment\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(event) {\n        var ContractFactory, instanceFactory, appointmentResult;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                event.preventDefault();\n                ContractFactory = truffleContract(ReceptionsitFactory);\n                ContractFactory.setProvider(web3.currentProvider);\n                _context5.next = 5;\n                return ContractFactory.deployed();\n\n              case 5:\n                instanceFactory = _context5.sent;\n                _context5.next = 8;\n                return instanceFactory.appointements.call(_parseInt(_this.state.appointmentIdSearch));\n\n              case 8:\n                appointmentResult = _context5.sent;\n                console.log(appointmentResult);\n\n                _this.setState({\n                  appointmentIdResult: appointmentResult[0].toNumber(),\n                  patientIdResult: appointmentResult[1].toNumber(),\n                  doctorIdresult: appointmentResult[2].toNumber(),\n                  dateResult: appointmentResult[3],\n                  chepComplaintResult: appointmentResult[4]\n                });\n\n                console.log(_this.state.appointmentResult);\n                return _context5.abrupt(\"return\", _this.onSearch());\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearch\", function () {\n      if (_this.state.appointmentIdResult) {\n        return React.createElement(Table, {\n          singleLine: true\n        }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Appointement Id\"), React.createElement(Table.HeaderCell, null, \"Patient Id\"), React.createElement(Table.HeaderCell, null, \"Doctor Id\"), React.createElement(Table.HeaderCell, null, \"Date\"), React.createElement(Table.HeaderCell, null, \"Chief Complaint\"))), React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, null, _this.state.appointmentIdResult), React.createElement(Table.Cell, null, _this.state.patientIdResult), React.createElement(Table.Cell, null, _this.state.doctorIdresult), React.createElement(Table.Cell, null, _this.state.dateResult), React.createElement(Table.Cell, null, _this.state.chepComplaintResult))));\n      } else {\n        return React.createElement(\"h1\", null, \"No Record Found\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPatientIdHandle\", function (event) {\n      var re = /^[0-9\\b]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          patientId: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPatientHandle\", function (event) {\n      var re = /^[A-Za-z ]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          patientName: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onGenderPatientHandle\", function (event, _ref6) {\n      var value = _ref6.value;\n\n      _this.setState({\n        patientGender: value\n      });\n\n      console.log(_this.state.patientGender);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAgeHandle\", function (event) {\n      var re = /^[0-9\\b]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          patientAge: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDoctorIdHandle\", function (event) {\n      var re = /^[0-9\\b]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          doctorId: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDoctorHandle\", function (event) {\n      var re = /^[A-Za-z ]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          doctorName: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onQualificationHandle\", function (event) {\n      var re = /^[A-Za-z ]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          doctorQualification: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onGenderDoctorHandle\", function (event, _ref7) {\n      var value = _ref7.value;\n\n      _this.setState({\n        doctorGender: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentId\", function (event) {\n      var re = /^[0-9\\b]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          appointmentId: event.target.value\n        });\n      } //console.log(this.state.app);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPatientAccountHandle\", function (event) {\n      _this.setState({\n        patientAccount: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDoctorAccountHandle\", function (event) {\n      _this.setState({\n        doctorAccount: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTextArea\", function (event) {\n      _this.setState({\n        textArea: event.target.value\n      });\n\n      console.log(_this.state.textArea);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlePatientChange\", function (e, _ref8) {\n      var value = _ref8.value;\n\n      //  console.log(value);\n      _this.setState({\n        currentPatientValue: value\n      });\n\n      console.log(_this.state.currentPatientValue);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleDoctorChange\", function (e, _ref9) {\n      var value = _ref9.value;\n\n      //  console.log(value);\n      _this.setState({\n        currentDoctorValue: value\n      });\n\n      console.log(_this.state.currentDoctorValue);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAppointmentIdSearch\", function (event) {\n      var re = /^[0-9\\b]+$/;\n\n      if (event.target.value === \"\" || re.test(event.target.value)) {\n        _this.setState({\n          appointmentIdSearch: event.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderDropDownPatient\", function (patienId) {\n      var _this$state = _this.state,\n          currentPatientValue = _this$state.currentPatientValue,\n          patientIdArray = _this$state.patientIdArray;\n      console.log(\"render maethod:\", _this.state.patientIdArray);\n\n      var patientArray = _this.state.patientIdArray.map(function (element, index) {\n        //console.log(\"element:\", index, element.toNumber());\n        var element1 = element.toNumber().toString();\n        return {\n          key: index,\n          text: element1,\n          value: element1\n        };\n      }); // const options = patientArray.map((element1, index) => {\n      //   return { key: index, text: element1, value: element1 };\n      // });\n      // console.log(\"options :\", options);\n      // console.log(\"patient Array:\", patientArray);\n      //\n      // { key: index, text:element.toNumber() , value: element.toNumber() },\n      // { key: 2, text: \"Choice 2\", value: 2 },\n      // { key: 3, text: \"Choice 3\", value: 3 }\n      // ];\n\n\n      return React.createElement(Dropdown, {\n        clearable: true,\n        options: patientArray,\n        selection: true,\n        search: true,\n        required: true,\n        value: currentPatientValue,\n        onChange: _this.handlePatientChange\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderDropDownDoctor\", function (doctorId) {\n      var currentDoctorValue = _this.state.currentDoctorValue;\n      console.log(\"render maethod:\", _this.state.doctorIdArray);\n\n      var doctorArray = _this.state.doctorIdArray.map(function (element, index) {\n        //console.log(\"element:\", index, element.toNumber());\n        var element1 = element.toNumber().toString();\n        return {\n          key: index,\n          text: element1,\n          value: element1\n        };\n      });\n\n      console.log(\"patient Array:\", doctorArray);\n      var options = [{\n        key: 1,\n        text: \"Choice 1\",\n        value: 1\n      }, {\n        key: 2,\n        text: \"Choice 2\",\n        value: 2\n      }, {\n        key: 3,\n        text: \"Choice 3\",\n        value: 3\n      }];\n      console.log(\"OPTIONS:\", options);\n      return React.createElement(Dropdown, {\n        clearable: true,\n        options: doctorArray,\n        selection: true,\n        search: true,\n        value: currentDoctorValue,\n        onChange: _this.handleDoctorChange\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"genderPatientRender\", function () {\n      var options = [{\n        key: 1,\n        text: \"Male\",\n        value: \"Male\"\n      }, {\n        key: 2,\n        text: \"Female\",\n        value: \"Female\"\n      }, {\n        key: 3,\n        text: \"Other\",\n        value: \"Other\"\n      }];\n      return React.createElement(Dropdown, {\n        clearable: true,\n        options: options,\n        selection: true,\n        search: true,\n        value: _this.state.patientGender,\n        onChange: _this.onGenderPatientHandle\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"genderDoctorRender\", function () {\n      var options = [{\n        key: 1,\n        text: \"Male\",\n        value: \"Male\"\n      }, {\n        key: 2,\n        text: \"Female\",\n        value: \"Female\"\n      }, {\n        key: 3,\n        text: \"Other\",\n        value: \"Other\"\n      }];\n      return React.createElement(Dropdown, {\n        clearable: true,\n        options: options,\n        selection: true,\n        search: true,\n        value: _this.state.doctorGender,\n        onChange: _this.onGenderDoctorHandle\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(hospitalDetails, [{\n    key: \"preparePatientDropDown\",\n    //prepare dropdown for patient\n    value: function () {\n      var _preparePatientDropDown = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var Factory, patientFactoryInstance, patientList, patient;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                Factory = truffleContract(ReceptionsitFactory); //  console.log(Factory);\n\n                Factory.setProvider(web3.currentProvider);\n                _context6.next = 4;\n                return Factory.deployed();\n\n              case 4:\n                patientFactoryInstance = _context6.sent;\n                _context6.next = 7;\n                return patientFactoryInstance.getPatientList.call();\n\n              case 7:\n                patientList = _context6.sent;\n                _context6.next = 10;\n                return _Promise.all(Array(_parseInt(patientList)).fill().map(function (element, index) {\n                  return patientFactoryInstance.patientId.call(index);\n                }));\n\n              case 10:\n                patient = _context6.sent;\n                console.log(\"Patient list:\", patient);\n                this.setState({\n                  patientIdArray: patient\n                });\n                console.log(\"patientList:\", this.state.patientIdArray);\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function preparePatientDropDown() {\n        return _preparePatientDropDown.apply(this, arguments);\n      }\n\n      return preparePatientDropDown;\n    }() //prepare dropdown for doctor id\n\n  }, {\n    key: \"prepareDoctorDropdown\",\n    value: function () {\n      var _prepareDoctorDropdown = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var Factory, doctorFactoryInstance, doctorList, doctor;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                Factory = truffleContract(ReceptionsitFactory); //  console.log(Factory);\n\n                Factory.setProvider(web3.currentProvider);\n                _context7.next = 4;\n                return Factory.deployed();\n\n              case 4:\n                doctorFactoryInstance = _context7.sent;\n                _context7.next = 7;\n                return doctorFactoryInstance.getDoctorList.call();\n\n              case 7:\n                doctorList = _context7.sent;\n                _context7.next = 10;\n                return _Promise.all(Array(_parseInt(doctorList)).fill().map(function (element, index) {\n                  return doctorFactoryInstance.doctorId.call(index);\n                }));\n\n              case 10:\n                doctor = _context7.sent;\n                console.log(\"Doctor list:\", doctor);\n                this.setState({\n                  doctorIdArray: doctor\n                });\n                console.log(\"patientList:\", this.state.doctorIdArray);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function prepareDoctorDropdown() {\n        return _prepareDoctorDropdown.apply(this, arguments);\n      }\n\n      return prepareDoctorDropdown;\n    }() //Add Doctor\n\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this2 = this;\n\n      var panes = [{\n        menuItem: \"Add Patient\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Patient Information\"), React.createElement(Form, {\n            onSubmit: _this2.addPatient,\n            error: !!_this2.state.errorMessagePatient\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, {\n            required: true\n          }, React.createElement(\"label\", null, \"Patient ID\"), React.createElement(Input, {\n            value: _this2.state.patientId,\n            onChange: _this2.onPatientIdHandle\n          })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Patient Name\"), React.createElement(Input, {\n            value: _this2.state.patientName,\n            onChange: _this2.onPatientHandle\n          }))), React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Patient Gender\"), _this2.genderPatientRender()), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Patient Age\"), React.createElement(Input, {\n            value: _this2.state.patientAge,\n            onChange: _this2.onAgeHandle\n          }))), React.createElement(Form.Field, {\n            required: true\n          }, React.createElement(\"label\", null, \"Account\"), React.createElement(Input, {\n            value: _this2.state.patientAccount,\n            onChange: _this2.onPatientAccountHandle\n          })), React.createElement(Message, {\n            error: true,\n            header: \"Oops..!\",\n            content: _this2.state.errorMessagePatient\n          }), React.createElement(Button, {\n            loading: _this2.state.loading,\n            primary: true\n          }, \" \", \"Add Patient\", \" \")));\n        }\n      }, {\n        menuItem: \"Add Doctor\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Doctor Information\"), React.createElement(Form, {\n            onSubmit: _this2.addDoctor,\n            error: !!_this2.state.errorMessageDoctor\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, {\n            required: true\n          }, React.createElement(\"label\", null, \"Doctor ID\"), React.createElement(Input, {\n            value: _this2.state.doctorId,\n            onChange: _this2.onDoctorIdHandle\n          })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor Name\"), React.createElement(Input, {\n            value: _this2.state.doctorName,\n            onChange: _this2.onDoctorHandle\n          }))), React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor Gender\"), _this2.genderDoctorRender()), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor Qualification\"), React.createElement(Input, {\n            value: _this2.state.doctorQualification,\n            onChange: _this2.onQualificationHandle\n          }))), React.createElement(Form.Field, {\n            required: true\n          }, React.createElement(\"label\", null, \"Account\"), React.createElement(Input, {\n            value: _this2.state.doctorAccount,\n            onChange: _this2.onDoctorAccountHandle\n          })), React.createElement(Message, {\n            error: true,\n            header: \"Oops..!\",\n            content: _this2.state.errorMessageDoctor\n          }), React.createElement(Button, {\n            loading: _this2.state.loading,\n            primary: true\n          }, \" \", \"Add Doctor\", \" \")));\n        }\n      }, {\n        menuItem: \"Create Appointment\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Create Appointment\"), React.createElement(Form, {\n            onSubmit: _this2.onAppointmentSubmit,\n            error: !!_this2.state.errorMessageAppointment\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, {\n            required: true\n          }, React.createElement(\"label\", null, \"Appointment Id\"), React.createElement(Input, {\n            value: _this2.state.appointmentId,\n            onChange: _this2.onAppointmentId\n          })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Appointment Date \"), React.createElement(Input, {\n            action: {\n              color: \"teal\",\n              icon: \"calendar\",\n              onClick: function onClick() {\n                return _this2.setState({\n                  dateTimeOpen: true\n                });\n              }\n            },\n            actionPosition: \"left\",\n            value: moment(_this2.state.myDate).format(\"LLL\"),\n            onClick: function onClick(event) {\n              return _this2.setState({\n                dateTimeOpen: true,\n                myDate: event.target.value\n              });\n            },\n            disabled: _this2.state.dateTimeOpen,\n            fluid: true\n          }), _this2.state.dateTimeOpen && React.createElement(DatetimePicker, {\n            onChange: function onChange(value) {\n              _this2.setState({\n                myDate: value,\n                dateTimeOpen: false\n              });\n\n              _this2.setState({\n                date: moment(_this2.state.myDate).format(\"LLL\")\n              });\n            },\n            moment: _this2.myDate,\n            time: true\n          }))), React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Patient ID\"), _this2.renderDropDownPatient()), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Doctor ID\"), _this2.renderDropDownDoctor())), React.createElement(Form.Field, null, React.createElement(Form.TextArea, {\n            label: \"Chep Complaint\",\n            rows: 2,\n            placeholder: \"write patient disease...\",\n            onChange: _this2.onTextArea\n          })), React.createElement(Message, {\n            error: true,\n            header: \"Oops..!\",\n            content: _this2.state.errorMessageAppointment\n          }), React.createElement(Button, {\n            loading: _this2.state.loading,\n            primary: true\n          }, \" \", \"Create Appointment\", \" \")));\n        }\n      }, {\n        menuItem: \"Search Appointment\",\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            attached: false\n          }, React.createElement(\"h1\", null, \"Search Appointment\"), React.createElement(Form, {\n            onSubmit: _this2.onSearchAppointment\n          }, React.createElement(Form.Group, {\n            widths: \"equal\"\n          }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Appointment Id\"), React.createElement(Input, {\n            value: _this2.state.appointmentIdSearch,\n            onChange: _this2.onAppointmentIdSearch\n          })), React.createElement(Button, {\n            primary: true\n          }, \" Search Appointment \"))), _this2.onSearch());\n        }\n      }];\n      return React.createElement(Tab, {\n        menu: {\n          attached: false\n        },\n        panes: panes\n      });\n    }\n  }, {\n    key: \"renderHospital\",\n    value: function renderHospital() {\n      var _this$props = this.props,\n          address = _this$props.address,\n          hospitalName = _this$props.hospitalName,\n          adminName = _this$props.adminName,\n          manager = _this$props.manager;\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, \"Hospital Name: \", hospitalName), React.createElement(\"div\", null, \"Admin Name: \", adminName), React.createElement(\"div\", null, \"Account: \", manager));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(\"div\", null, React.createElement(Button, {\n        floated: \"right\",\n        primary: true,\n        content: \"Show admin View\",\n        onClick: this.onUnlockView\n      }), React.createElement(\"div\", {\n        style: {\n          marginLeft: 300\n        }\n      }, React.createElement(\"h1\", null, \"Hospital Details\")), React.createElement(\"div\", {\n        style: {\n          backgroundColor: \"#4267b2\",\n          color: \"white\",\n          marginTop: 10,\n          borderRadius: 4,\n          padding: 10,\n          paddingLeft: 50,\n          margin: 10,\n          fontFamily: \"Times New Roman, Times, serif\",\n          fontSize: 20\n        }\n      }, this.renderHospital())), React.createElement(\"hr\", null), React.createElement(ToggleDisplay, {\n        show: this.state.show\n      }, React.createElement(\"h1\", {\n        style: {\n          marginLeft: 300\n        }\n      }, \"Admin Panel\"), this.renderTabs(), React.createElement(\"hr\", null)), React.createElement(ToggleDisplay, {\n        show: !this.state.show\n      }, React.createElement(\"div\", null, React.createElement(\"h1\", {\n        style: {\n          color: \"red\"\n        }\n      }, this.state.notAdmin))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    //get Address of  hospital/ Receptionist contract provided in intial props and set show contract information\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(props) {\n        var address, accounts, ContractReceptionist, instanceReceptionist, hospitalSummary, optionsArray;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                address = props.query.address;\n                console.log(\"ADdress:\", address);\n                _context8.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context8.sent;\n                ContractReceptionist = truffleContract(Receptionist);\n                ContractReceptionist.setProvider(web3.currentProvider);\n                _context8.next = 9;\n                return ContractReceptionist.at(address);\n\n              case 9:\n                instanceReceptionist = _context8.sent;\n                _context8.next = 12;\n                return instanceReceptionist.getSummary.call();\n\n              case 12:\n                hospitalSummary = _context8.sent;\n                console.log(accounts[0], \"and acctual is ===:\", hospitalSummary[2]);\n                optionsArray = [\"one\", \"two\", \"three\"];\n                console.log(\"S\", hospitalSummary);\n                return _context8.abrupt(\"return\", {\n                  address: props.query.address,\n                  hospitalName: hospitalSummary[0],\n                  adminName: hospitalSummary[1],\n                  manager: hospitalSummary[2]\n                });\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getInitialProps(_x5) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }() //unlock admin view\n\n  }]);\n\n  return hospitalDetails;\n}(Component);\n\nexport default hospitalDetails;","map":null,"metadata":{},"sourceType":"module"}