"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _InputView = _interopRequireDefault(require("../views/InputView"));

var _parse = require("./parse");

var _lib = require("../lib");

var _DatesRangePicker = _interopRequireDefault(require("../pickers/dayPicker/DatesRangePicker"));

var _BaseInput2 = _interopRequireDefault(require("./BaseInput"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DATES_SEPARATOR = ' - ';

function cleanDate(inputString, dateFormat) {
  var formattedDateLength = (0, _moment.default)().format(dateFormat).length;
  return inputString.trim().slice(0, formattedDateLength);
}
/**
 * Extract start and end dates from input string.
 * Return { start: Moment|undefined, end: Moment|undefined }
 * @param {string} inputString Row input string from user
 * @param {string} dateFormat Moment formatting string
 */


function parseDatesRange(inputString, dateFormat) {
  // dates range is "startDate - endDate"
  var dates = inputString.split(DATES_SEPARATOR).map(function (date) {
    return cleanDate(date, dateFormat);
  });
  var result = {};
  var start;
  var end;
  start = (0, _moment.default)(dates[0], dateFormat);

  if (dates.length === 2) {
    end = (0, _moment.default)(dates[1], dateFormat);
  }

  if (start && start.isValid()) {
    result.start = start;
  }

  if (end && end.isValid()) {
    result.end = end;
  }

  return result;
}

var DatesRangeInput =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(DatesRangeInput, _BaseInput);

  /**
   * Component responsibility:
   *  - parse input value (start: Moment, end: Moment)
   *  - handle DayPicker change (format {start: Moment, end: Moment} into
   *    string 'start - end')
   */
  function DatesRangeInput(props) {
    var _this;

    _classCallCheck(this, DatesRangeInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatesRangeInput).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelect", function (e, _ref) {
      var value = _ref.value;
      var dateFormat = _this.props.dateFormat;
      var start = value.start,
          end = value.end;
      var outputString = '';

      if (start && end) {
        outputString = "".concat(start.format(dateFormat)).concat(DATES_SEPARATOR).concat(end.format(dateFormat));
      } else if (start) {
        outputString = "".concat(start.format(dateFormat)).concat(DATES_SEPARATOR);
      }

      _lodash.default.invoke(_this.props, 'onChange', e, _objectSpread({}, _this.props, {
        value: outputString
      }));

      if (_this.props.closable && start && end) {
        _this.closePopup();
      }
    });

    _this.state = {};
    return _this;
  }

  _createClass(DatesRangeInput, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          value = _this$props.value,
          initialDate = _this$props.initialDate,
          dateFormat = _this$props.dateFormat,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate;
      var rest = (0, _lib.getUnhandledProps)(DatesRangeInput, this.props);

      var _parseDatesRange = parseDatesRange(value, dateFormat),
          start = _parseDatesRange.start,
          end = _parseDatesRange.end;

      return _react.default.createElement(_InputView.default, _extends({
        popupIsClosed: this.state.popupIsClosed,
        icon: "calendar"
      }, rest, {
        value: value,
        onMount: this.onInputViewMount,
        render: function render(pickerProps) {
          return _react.default.createElement(_DatesRangePicker.default, _extends({}, pickerProps, {
            isPickerInFocus: _this2.isPickerInFocus,
            isTriggerInFocus: _this2.isTriggerInFocus,
            inline: _this2.props.inline,
            onCalendarViewMount: _this2.onCalendarViewMount,
            closePopup: _this2.closePopup,
            onChange: _this2.handleSelect,
            dateFormat: dateFormat,
            initializeWith: (0, _parse.getInitializer)({
              initialDate: initialDate,
              dateFormat: dateFormat
            }),
            start: start,
            end: end,
            minDate: (0, _parse.parseValue)(minDate, dateFormat),
            maxDate: (0, _parse.parseValue)(maxDate, dateFormat)
          }));
        }
      }));
    }
  }]);

  return DatesRangeInput;
}(_BaseInput2.default);

_defineProperty(DatesRangeInput, "handledProps", ["closable", "dateFormat", "initialDate", "maxDate", "minDate", "value"]);

DatesRangeInput.propTypes = {
  /** Currently selected value. */
  value: _propTypes.default.string,

  /** Moment date formatting string. */
  dateFormat: _propTypes.default.string,

  /** Date to display initially when no date is selected. */
  initialDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** Maximum date that can be selected. */
  maxDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** Minimum date that can be selected. */
  minDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** If true, popup closes after selecting a date-time. */
  closable: _propTypes.default.bool
};
DatesRangeInput.defaultProps = {
  dateFormat: 'DD-MM-YYYY'
};
var _default = DatesRangeInput;
exports.default = _default;