"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _InputView = _interopRequireDefault(require("../views/InputView"));

var _HourPicker = _interopRequireDefault(require("../pickers/timePicker/HourPicker"));

var _MinutePicker = _interopRequireDefault(require("../pickers/timePicker/MinutePicker"));

var _BaseInput2 = _interopRequireDefault(require("./BaseInput"));

var _parse = require("./parse");

var _lib = require("../lib");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getNextMode(currentMode) {
  if (currentMode === 'hour') return 'minute';
  return 'hour';
}

var TimeInput =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(TimeInput, _BaseInput);

  /**
   * Component responsibility:
   *  - parse time input string
   *  - switch between modes ['hour', 'minute']
   *  - handle HourPicker/MinutePicker change (format { hour: number, minute: number } into output time string)
   */
  function TimeInput(props) {
    var _this;

    _classCallCheck(this, TimeInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeInput).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelect", function (e, _ref) {
      var value = _ref.value;
      (0, _lib.tick)(_this.handleSelectUndelayed, e, {
        value: value
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelectUndelayed", function (e, _ref2) {
      var value = _ref2.value;
      var hour = value.hour,
          minute = value.minute;
      var _this$props = _this.props,
          timeFormat = _this$props.timeFormat,
          disableMinute = _this$props.disableMinute;
      var outputTimeString = '';

      if (_this.state.mode === 'hour' && !_lodash.default.isNil(hour)) {
        outputTimeString = (0, _moment.default)({
          hour: hour
        }).format(_parse.TIME_FORMAT[timeFormat]);
      } else if (!_lodash.default.isNil(hour) && !_lodash.default.isNil(minute)) {
        outputTimeString = (0, _moment.default)({
          hour: hour,
          minute: minute
        }).format(_parse.TIME_FORMAT[timeFormat]);
      }

      _lodash.default.invoke(_this.props, 'onChange', e, _objectSpread({}, _this.props, {
        value: outputTimeString
      }));

      if (_this.props.closable && _this.state.mode === 'minute') {
        _this.closePopup();
      }

      if (!disableMinute) _this.switchToNextMode();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchToNextMode", function () {
      _this.setState(function (_ref3) {
        var mode = _ref3.mode;
        return {
          mode: getNextMode(mode)
        };
      }, _this.onModeSwitch);
    });

    _this.state = {
      mode: 'hour'
    };
    return _this;
  }

  _createClass(TimeInput, [{
    key: "getPicker",
    value: function getPicker(_ref4) {
      var tabIndex = _ref4.tabIndex;
      var _this$props2 = this.props,
          value = _this$props2.value,
          timeFormat = _this$props2.timeFormat,
          inline = _this$props2.inline;
      var currentValue = (0, _parse.parseValue)(value, _parse.TIME_FORMAT[timeFormat]);
      var pickerProps = {
        inline: inline,
        onCalendarViewMount: this.onCalendarViewMount,
        isPickerInFocus: this.isPickerInFocus,
        isTriggerInFocus: this.isTriggerInFocus,
        hasHeader: false,
        closePopup: this.closePopup,
        initializeWith: (0, _parse.getInitializer)({
          initialDate: currentValue,
          dateFormat: _parse.TIME_FORMAT[timeFormat]
        }),
        value: currentValue,
        onChange: this.handleSelect,
        timeFormat: timeFormat,
        tabIndex: tabIndex // key: value, // seems like it works without reinstantiating picker every time value changes

      };

      if (this.state.mode === 'hour') {
        return _react.default.createElement(_HourPicker.default, pickerProps);
      }

      return _react.default.createElement(_MinutePicker.default, pickerProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var value = this.props.value;
      var rest = (0, _lib.getUnhandledProps)(TimeInput, this.props);
      return _react.default.createElement(_InputView.default, _extends({
        popupIsClosed: this.state.popupIsClosed,
        icon: "time",
        onMount: this.onInputViewMount
      }, rest, {
        value: value,
        render: function render(pickerProps) {
          return _this2.getPicker(pickerProps);
        }
      }));
    }
  }]);

  return TimeInput;
}(_BaseInput2.default);

_defineProperty(TimeInput, "handledProps", ["closable", "disableMinute", "timeFormat", "value"]);

TimeInput.propTypes = {
  /** Currently selected value. */
  value: _propTypes.default.string,

  /** One of ["24", "AMPM", "ampm"] */
  timeFormat: _propTypes.default.oneOf(['24', 'AMPM', 'ampm']),

  /** If true, popup closes after selecting a date-time. */
  closable: _propTypes.default.bool,

  /** If true, minutes picker won't be shown after picking the hour. */
  disableMinute: _propTypes.default.bool
};
TimeInput.defaultProps = {
  timeFormat: '24',
  disableMinute: false
};
var _default = TimeInput;
exports.default = _default;