"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _InputView = _interopRequireDefault(require("../views/InputView"));

var _YearPicker = _interopRequireDefault(require("../pickers/YearPicker"));

var _MonthPicker = _interopRequireDefault(require("../pickers/MonthPicker"));

var _DayPicker = _interopRequireDefault(require("../pickers/dayPicker/DayPicker"));

var _BaseInput2 = _interopRequireDefault(require("./BaseInput"));

var _parse = require("./parse");

var _lib = require("../lib");

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getNextMode(currentMode) {
  if (currentMode === 'year') return 'month';
  if (currentMode === 'month') return 'day';
  return 'year';
}

function getPrevMode(currentMode) {
  if (currentMode === 'day') return 'month';
  if (currentMode === 'month') return 'year';
  return 'day';
}

var DateInput =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(DateInput, _BaseInput);

  function DateInput(props) {
    var _this;

    _classCallCheck(this, DateInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateInput).call(this, props));
    /*
      state fields:
        - mode: one of [ 'year', 'month', 'day' ]
        - year: number
        - month: number
        - date: number
    */

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_switchToNextModeUndelayed", function () {
      _this.setState(function (_ref) {
        var mode = _ref.mode;
        return {
          mode: getNextMode(mode)
        };
      }, _this.onModeSwitch);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchToNextMode", function () {
      (0, _lib.tick)(_this._switchToNextModeUndelayed);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_switchToPrevModeUndelayed", function () {
      _this.setState(function (_ref2) {
        var mode = _ref2.mode;
        return {
          mode: getPrevMode(mode)
        };
      }, _this.onModeSwitch);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchToPrevMode", function () {
      (0, _lib.tick)(_this._switchToPrevModeUndelayed);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onFocus", function () {
      if (!_this.props.preserveViewMode) {
        _this.setState({
          mode: _this.props.startMode
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelect", function (e, _ref3) {
      var value = _ref3.value;

      if (_this.state.mode === 'day' && _this.props.closable) {
        _this.closePopup();
      }

      _this.setState(function (prevState) {
        var mode = prevState.mode;

        if (mode === 'day') {
          var outValue = (0, _moment.default)(value).format(_this.props.dateFormat);

          _lodash.default.invoke(_this.props, 'onChange', e, _objectSpread({}, _this.props, {
            value: outValue
          }));
        }

        return _objectSpread({}, value);
      }, function () {
        return _this.state.mode !== 'day' && _this.switchToNextMode();
      });
    });

    _this.state = {
      mode: props.startMode
    };
    var parsedValue = (0, _parse.parseValue)(props.value);

    if (parsedValue) {
      _this.state.year = parsedValue.year();
      _this.state.month = parsedValue.month();
      _this.state.date = parsedValue.date();
    }

    return _this;
  }

  _createClass(DateInput, [{
    key: "getDateParams",
    value: function getDateParams() {
      /* 
        Return date params that are used for picker initialization.
        Return undefined if none of [ 'year', 'month', 'date' ]
        state fields defined.
      */
      var _this$state = this.state,
          year = _this$state.year,
          month = _this$state.month,
          date = _this$state.date;

      if (!_lodash.default.isNil(year) || !_lodash.default.isNil(month) || !_lodash.default.isNil(date)) {
        return {
          year: year,
          month: month,
          date: date
        };
      }
    }
  }, {
    key: "getPicker",
    value: function getPicker(_ref4) {
      var tabIndex = _ref4.tabIndex;
      var _this$props = this.props,
          value = _this$props.value,
          initialDate = _this$props.initialDate,
          dateFormat = _this$props.dateFormat,
          disable = _this$props.disable,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate,
          enable = _this$props.enable,
          inline = _this$props.inline;
      var pickerProps = {
        isPickerInFocus: this.isPickerInFocus,
        isTriggerInFocus: this.isTriggerInFocus,
        inline: inline,
        onCalendarViewMount: this.onCalendarViewMount,
        closePopup: this.closePopup,
        tabIndex: tabIndex,
        hasHeader: true,
        onChange: this.handleSelect,
        onHeaderClick: this.switchToPrevMode,
        initializeWith: (0, _parse.getInitializer)({
          initialDate: initialDate,
          dateFormat: dateFormat,
          dateParams: this.getDateParams()
        }),
        value: (0, _parse.parseValue)((0, _parse.chooseValue)(value, initialDate), dateFormat),
        enable: (0, _parse.parseArrayOrValue)(enable, dateFormat),
        minDate: (0, _parse.parseValue)(minDate, dateFormat),
        maxDate: (0, _parse.parseValue)(maxDate, dateFormat) // key: value, // seems like it works without reinstantiating picker every time value changes

      };
      var disableParsed = (0, _parse.parseArrayOrValue)(disable, dateFormat);
      var mode = this.state.mode;

      if (mode === 'year') {
        return _react.default.createElement(_YearPicker.default, _extends({}, pickerProps, {
          disable: (0, _shared.getDisabledYears)(disableParsed)
        }));
      }

      if (mode === 'month') {
        return _react.default.createElement(_MonthPicker.default, _extends({}, pickerProps, {
          disable: (0, _shared.getDisabledMonths)(disableParsed)
        }));
      }

      return _react.default.createElement(_DayPicker.default, _extends({}, pickerProps, {
        disable: disableParsed
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var value = this.props.value;
      var rest = (0, _lib.getUnhandledProps)(DateInput, this.props);
      return _react.default.createElement(_InputView.default, _extends({
        popupIsClosed: this.state.popupIsClosed,
        onMount: this.onInputViewMount,
        icon: "calendar",
        onFocus: this._onFocus
      }, rest, {
        render: function render(props) {
          return _this2.getPicker(props);
        },
        value: (0, _parse.chooseValue)(value, undefined)
      }));
    }
  }]);

  return DateInput;
}(_BaseInput2.default);

_defineProperty(DateInput, "handledProps", ["closable", "dateFormat", "disable", "enable", "initialDate", "maxDate", "minDate", "preserveViewMode", "startMode", "value"]);

DateInput.propTypes = {
  /** Currently selected value. */
  value: _propTypes.default.string,

  /** Moment date formatting string. */
  dateFormat: _propTypes.default.string,

  /** Date to display initially when no date is selected. */
  initialDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** Date or list of dates that are displayed as disabled. */
  disable: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.instanceOf(_moment.default), _propTypes.default.arrayOf(_propTypes.default.instanceOf(_moment.default)), _propTypes.default.instanceOf(Date), _propTypes.default.arrayOf(_propTypes.default.instanceOf(Date))]),

  /** Date or list of dates that are enabled (the rest are disabled). */
  enable: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.instanceOf(_moment.default)), _propTypes.default.arrayOf(_propTypes.default.instanceOf(Date))]),

  /** Maximum date that can be selected. */
  maxDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** Minimum date that can be selected. */
  minDate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_moment.default), _propTypes.default.instanceOf(Date)]),

  /** Preserve viewmode on focus? */
  preserveViewMode: _propTypes.default.bool,

  /** Display mode to start. */
  startMode: _propTypes.default.oneOf(['year', 'month', 'day']),

  /** If true, popup closes after selecting a date-time. */
  closable: _propTypes.default.bool
};
DateInput.defaultProps = {
  dateFormat: 'DD-MM-YYYY',
  startMode: 'day',
  preserveViewMode: true
};
var _default = DateInput;
exports.default = _default;