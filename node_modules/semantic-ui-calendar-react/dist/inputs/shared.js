"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDisabledMonths = getDisabledMonths;
exports.getDisabledYears = getDisabledYears;

/**
 * Filter out all moments that don't have
 * all dates in month disabled.
 * @param {*} moments
 * @return An array of moments; each of these moments
 * doesn't have any selectable date in month.
 */
function getDisabledMonths(moments) {
  if (!moments) {
    return;
  }

  var disabledMonths = [];
  var checkedMonths = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var m = _step.value;

      if (checkedMonths.indexOf(m.month()) < 0) {
        var momentsForMonth = moments.filter(function (_m) {
          return _m.month() === m.month();
        });
        var momentsForMonthUniq = [];

        for (var i = 0; i < momentsForMonth.length; i++) {
          if (momentsForMonthUniq.indexOf(momentsForMonth[i]) < 0) {
            momentsForMonthUniq.push(momentsForMonth[i]);
          }
        }

        if (momentsForMonthUniq.length === m.daysInMonth()) {
          disabledMonths.push(m);
        }

        checkedMonths.push(m);
      }
    };

    for (var _iterator = moments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return disabledMonths;
}
/**
 * Filter out all moments that don't have
 * all months in year disabled.
 * @param {*} moments
 * @return An array of moments; each of these moments
 * doesn't have any selectable month in year.
 */


function getDisabledYears(moments) {
  if (!moments) {
    return;
  }

  var disabledYears = [];
  var checkedYears = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    var _loop2 = function _loop2() {
      var y = _step2.value;

      if (checkedYears.indexOf(y.year()) < 0) {
        var momentsForYear = getDisabledMonths(moments.filter(function (_y) {
          return _y.year() === y.year();
        }));
        var momentsForYearUniq = [];

        for (var i = 0; i < momentsForYear.length; i++) {
          if (momentsForYearUniq.indexOf(momentsForYear[i]) < 0) {
            momentsForYearUniq.push(momentsForYear[i]);
          }
        }

        if (momentsForYearUniq.length === 12) {
          disabledYears.push(y);
        }

        checkedYears.push(y);
      }
    };

    for (var _iterator2 = moments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      _loop2();
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return disabledYears;
}