"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _semanticUiReact = require("semantic-ui-react");

var _lodash = _interopRequireDefault(require("lodash"));

var _HeaderRange = _interopRequireDefault(require("./HeaderRange"));

var _HeaderWeeks = _interopRequireDefault(require("./HeaderWeeks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Header(props) {
  var rangeRowContent = props.rangeRowContent,
      displayWeeks = props.displayWeeks,
      onNextPageBtnClick = props.onNextPageBtnClick,
      onPrevPageBtnClick = props.onPrevPageBtnClick,
      hasPrevPage = props.hasPrevPage,
      hasNextPage = props.hasNextPage,
      onHeaderClick = props.onHeaderClick,
      width = props.width,
      title = props.title;
  var cellStyle = {
    border: 'none',
    borderBottom: displayWeeks ? 'none' : '1px solid rgba(34,36,38,.1)'
  };
  var prevPageBtnStyle = {
    cursor: hasPrevPage ? 'pointer' : 'auto'
  };
  var nextPageBtnStyle = {
    cursor: hasNextPage ? 'pointer' : 'auto'
  };
  var headerTitleStyle = {
    cursor: onHeaderClick ? 'pointer' : 'default'
  };
  return _react.default.createElement(_semanticUiReact.Table.Header, null, !_lodash.default.isNil(rangeRowContent) && _react.default.createElement(_HeaderRange.default, {
    content: rangeRowContent
  }), _react.default.createElement(_semanticUiReact.Table.Row, null, _react.default.createElement(_semanticUiReact.Table.HeaderCell, {
    style: cellStyle,
    colSpan: "1"
  }, _react.default.createElement(_semanticUiReact.Icon, {
    fitted: true,
    style: prevPageBtnStyle,
    disabled: !hasPrevPage,
    onClick: hasPrevPage ? onPrevPageBtnClick : undefined,
    name: "chevron left"
  })), _react.default.createElement(_semanticUiReact.Table.HeaderCell, {
    onClick: onHeaderClick ? onHeaderClick : undefined,
    style: cellStyle,
    colSpan: (parseInt(width) - 2).toString()
  }, _react.default.createElement("span", {
    style: headerTitleStyle
  }, title)), _react.default.createElement(_semanticUiReact.Table.HeaderCell, {
    style: cellStyle,
    colSpan: "1"
  }, _react.default.createElement(_semanticUiReact.Icon, {
    fitted: true,
    style: nextPageBtnStyle,
    disabled: !hasNextPage,
    onClick: hasNextPage ? onNextPageBtnClick : undefined,
    name: "chevron right"
  }))), displayWeeks && _react.default.createElement(_HeaderWeeks.default, null));
}

Header.handledProps = ["displayWeeks", "hasNextPage", "hasPrevPage", "onHeaderClick", "onNextPageBtnClick", "onPrevPageBtnClick", "rangeRowContent", "title", "width"];
Header.propTypes = {
  /** Header text content. */
  title: _propTypes.default.string.isRequired,

  /** Called after click on next page button. */
  onNextPageBtnClick: _propTypes.default.func.isRequired,

  /** Called after click on previous page button. */
  onPrevPageBtnClick: _propTypes.default.func.isRequired,

  /** Whether to display previous page button as active or disabled. */
  hasPrevPage: _propTypes.default.bool.isRequired,

  /** Whether to display next page button as active or disabled. */
  hasNextPage: _propTypes.default.bool.isRequired,

  /** Whether to display weeks row or not. */
  displayWeeks: _propTypes.default.bool.isRequired,

  /** Header width. */
  width: _propTypes.default.oneOf(['3', '4', '7']).isRequired,

  /** Text content to display in dates-range row. */
  rangeRowContent: _propTypes.default.string,

  /** Called after click on calendar header. */
  onHeaderClick: _propTypes.default.func
};
var _default = Header;
exports.default = _default;