"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _semanticUiReact = require("semantic-ui-react");

var _lib = require("../lib");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var popupStyle = {
  padding: '0',
  filter: 'none' // prevents bluring popup when used inside Modal with dimmer="bluring" #28 #26

};

var FormInputWithRef =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormInputWithRef, _React$Component);

  function FormInputWithRef() {
    _classCallCheck(this, FormInputWithRef);

    return _possibleConstructorReturn(this, _getPrototypeOf(FormInputWithRef).apply(this, arguments));
  }

  _createClass(FormInputWithRef, [{
    key: "render",
    value: function render() {
      return _react.default.createElement(_semanticUiReact.Form.Input, this.props);
    }
  }]);

  return FormInputWithRef;
}(_react.default.Component);

_defineProperty(FormInputWithRef, "handledProps", []);

var InputView =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(InputView, _React$Component2);

  function InputView() {
    _classCallCheck(this, InputView);

    return _possibleConstructorReturn(this, _getPrototypeOf(InputView).apply(this, arguments));
  }

  _createClass(InputView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this.inputNode);
      this.initialInputNode = this.inputNode;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      // TODO: find actual root of the problem.
      // Sometimes input node reference passed
      // to this.props.onMount stales.
      // this.inputNode referes to 
      // different DOM object than it was after first
      // component render.
      // InputView component doesn't unmount it just
      // gets different underlying input node.
      // In order to keep input node reference fresh
      // we make this check.
      if (this.inputNode !== this.initialInputNode) {
        this.initialInputNode = this.inputNode;
        this.props.onMount(this.inputNode);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          popupPosition = _this$props.popupPosition,
          inline = _this$props.inline,
          value = _this$props.value,
          closeOnMouseLeave = _this$props.closeOnMouseLeave,
          onChange = _this$props.onChange,
          inlineLabel = _this$props.inlineLabel,
          popupIsClosed = _this$props.popupIsClosed,
          mountNode = _this$props.mountNode,
          tabIndex = _this$props.tabIndex;
      var rest = (0, _lib.getUnhandledProps)(InputView, this.props);

      var inputElement = _react.default.createElement(FormInputWithRef, _extends({}, rest, {
        ref: function ref(e) {
          var node = _reactDom.default.findDOMNode(e);

          _this.inputNode = node && node.querySelector('input');
        },
        value: value,
        tabIndex: tabIndex,
        inline: inlineLabel,
        onChange: onChange
      }));

      if (inline) return this.props.render({
        tabIndex: tabIndex
      });
      return _react.default.createElement(_semanticUiReact.Popup, {
        position: popupPosition,
        open: popupIsClosed ? false : undefined,
        trigger: inputElement,
        hoverable: closeOnMouseLeave,
        flowing: true,
        mountNode: mountNode,
        style: popupStyle,
        hideOnScroll: true,
        on: "focus"
      }, this.props.render({
        tabIndex: -1
      }));
    }
  }]);

  return InputView;
}(_react.default.Component);

_defineProperty(InputView, "handledProps", ["children", "closeOnMouseLeave", "inline", "inlineLabel", "mountNode", "onChange", "onMount", "popupIsClosed", "popupPosition", "render", "tabIndex", "value"]);

InputView.propTypes = {
  render: _propTypes.default.func.isRequired,

  /** Whether to display inline picker or picker inside a popup. */
  inline: _propTypes.default.bool,

  /** Where to display popup. */
  popupPosition: _propTypes.default.string,

  /** Currently selected value. */
  value: _propTypes.default.string,

  /** Whether to close a popup when cursor leaves it. */
  closeOnMouseLeave: _propTypes.default.bool,

  /** Called after input field value has changed. */
  onChange: _propTypes.default.func,

  /** Picker. */
  children: _propTypes.default.node,

  /** A field can have its label next to instead of above it. */
  inlineLabel: _propTypes.default.bool,

  /** Whether popup is closed. */
  popupIsClosed: _propTypes.default.bool,

  /** The node where the picker should mount. */
  mountNode: _propTypes.default.any,
  tabIndex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  onMount: _propTypes.default.func
};
InputView.defaultProps = {
  inline: false,
  closeOnMouseLeave: true,
  tabIndex: '0'
};
var _default = InputView;
exports.default = _default;