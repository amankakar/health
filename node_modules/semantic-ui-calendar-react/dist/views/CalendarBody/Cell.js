"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cell = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _semanticUiReact = require("semantic-ui-react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../../lib");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var hoverCellStyles = {
  outline: '1px solid #85b7d9',
  cursor: 'pointer'
};

var Cell =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Cell, _React$Component);

  function Cell() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Cell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cell)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleHoverCell", function () {
      _this.setState(function (prevState) {
        return {
          hoverCell: !prevState.hoverCell
        };
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCellClick", function (event) {
      _lodash.default.invoke(_this.props, 'onClick', event, _objectSpread({}, _this.props, {
        value: _this.props.content
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCellHover", function (event) {
      _lodash.default.invoke(_this.props, 'onHover', event, _objectSpread({}, _this.props));
    });

    return _this;
  }

  _createClass(Cell, [{
    key: "render",
    value: function render() {
      var rest = (0, _lib.getUnhandledProps)(Cell, this.props);

      var style = _objectSpread({}, this.props.style, this.props.hovered ? hoverCellStyles : undefined);

      return _react.default.createElement(_semanticUiReact.Table.Cell, _extends({}, rest, {
        style: style,
        onMouseOver: this.onCellHover,
        onClick: this.onCellClick
      }), this.props.content);
    }
  }]);

  return Cell;
}(_react.default.Component);

exports.Cell = Cell;

_defineProperty(Cell, "handledProps", ["content", "hovered", "itemPosition", "onClick", "onHover", "style"]);

Cell.propTypes = {
  /** Position of a cell on the page. */
  itemPosition: _propTypes.default.number.isRequired,

  /** Cell's content. */
  content: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,

  /** Called after click on a cell. */
  onClick: _propTypes.default.func,
  onHover: _propTypes.default.func,
  hovered: _propTypes.default.bool,
  style: _propTypes.default.object
};
var _default = Cell;
exports.default = _default;