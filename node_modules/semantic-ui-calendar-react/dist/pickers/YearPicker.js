"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _YearView = _interopRequireDefault(require("../views/YearView"));

var _lib = require("../lib");

var _BasePicker2 = _interopRequireDefault(require("./BasePicker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PAGE_WIDTH = 3;
var PAGE_HEIGHT = 4;
var YEARS_ON_PAGE = PAGE_WIDTH * PAGE_HEIGHT;

var YearPicker =
/*#__PURE__*/
function (_BasePicker) {
  _inherits(YearPicker, _BasePicker);

  /*
    Note:
      use it like this <YearPicker key={someInputValue} />
      to make react create new instance when input value changes
  */
  function YearPicker(props) {
    var _this;

    _classCallCheck(this, YearPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(YearPicker).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getInitialDatePosition", function () {
      return _this.buildCalendarValues().indexOf(_this.state.date.year().toString());
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getSelectableCellPositions", function () {
      return _lodash.default.filter(_lodash.default.range(0, YEARS_ON_PAGE), function (y) {
        return !_lodash.default.includes(_this.getDisabledYearsPositions(), y);
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (e, _ref) {
      var value = _ref.value;
      var year = parseInt(value);

      _lodash.default.invoke(_this.props, 'onChange', e, _objectSpread({}, _this.props, {
        value: {
          year: year
        }
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchToNextPage", function (e, data, callback) {
      _this.setState(function (_ref2) {
        var date = _ref2.date;
        var nextDate = date.clone();
        nextDate.add(YEARS_ON_PAGE, 'year');
        return {
          date: nextDate
        };
      }, callback);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchToPrevPage", function (e, data, callback) {
      _this.setState(function (_ref3) {
        var date = _ref3.date;
        var prevDate = date.clone();
        prevDate.subtract(YEARS_ON_PAGE, 'year');
        return {
          date: prevDate
        };
      }, callback);
    });

    _this.state = {
      /* moment instance */
      date: props.initializeWith.clone()
    };
    _this.PAGE_WIDTH = PAGE_WIDTH;
    return _this;
  }

  _createClass(YearPicker, [{
    key: "buildCalendarValues",
    value: function buildCalendarValues() {
      /*
        Return array of years (strings) like ['2012', '2013', ...]
        that used to populate calendar's page.
      */
      var years = [];
      var date = this.state.date;
      var padd = date.year() % YEARS_ON_PAGE;
      var first = date.year() - padd;

      for (var i = 0; i < YEARS_ON_PAGE; i++) {
        years[i] = (first + i).toString();
      }

      return years;
    }
  }, {
    key: "getActiveCellPosition",
    value: function getActiveCellPosition() {
      /*
        Return position of a year that should be displayed as active
        (position in array returned by `this.buildCalendarValues`).
      */
      if (!_lodash.default.isNil(this.props.value)) {
        var years = this.buildCalendarValues();
        var yearIndex = years.indexOf(this.props.value.year().toString());

        if (yearIndex >= 0) {
          return yearIndex;
        }
      }
    }
  }, {
    key: "getDisabledYearsPositions",
    value: function getDisabledYearsPositions() {
      /*
        Return position numbers of years that should be displayed as disabled
        (position in array returned by `this.buildCalendarValues`).
      */
      var disabled = [];
      var years = this.buildCalendarValues();

      if (_lodash.default.isArray(this.props.enable)) {
        var enabledYears = this.props.enable.map(function (yearMoment) {
          return yearMoment.year().toString();
        });
        disabled = _lodash.default.concat(disabled, years.filter(function (year) {
          return !_lodash.default.includes(enabledYears, year);
        }).map(function (year) {
          return years.indexOf(year);
        }));
      }

      if (_lodash.default.isArray(this.props.disable)) {
        disabled = _lodash.default.concat(disabled, this.props.disable.filter(function (yearMoment) {
          return _lodash.default.includes(years, yearMoment.year().toString());
        }).map(function (yearMoment) {
          return years.indexOf(yearMoment.year().toString());
        }));
      }

      if (!_lodash.default.isNil(this.props.maxDate)) {
        if (parseInt(_lodash.default.first(years)) > this.props.maxDate.year()) {
          disabled = _lodash.default.range(0, years.length);
        } else if (_lodash.default.includes(years, this.props.maxDate.year().toString())) {
          disabled = _lodash.default.concat(disabled, _lodash.default.range(years.indexOf(this.props.maxDate.year().toString()) + 1, years.length));
        }
      }

      if (!_lodash.default.isNil(this.props.minDate)) {
        if (parseInt(_lodash.default.last(years)) < this.props.minDate.year()) {
          disabled = _lodash.default.range(0, years.length);
        } else if (_lodash.default.includes(years, this.props.minDate.year().toString())) {
          disabled = _lodash.default.concat(disabled, _lodash.default.range(0, years.indexOf(this.props.minDate.year().toString())));
        }
      }

      if (disabled.length > 0) {
        return _lodash.default.uniq(disabled);
      }
    }
  }, {
    key: "isNextPageAvailable",
    value: function isNextPageAvailable() {
      var _this$props = this.props,
          maxDate = _this$props.maxDate,
          enable = _this$props.enable;
      var lastOnPage = parseInt(_lodash.default.last(this.buildCalendarValues()));

      if (_lodash.default.isArray(enable)) {
        return _lodash.default.some(enable, function (enabledYear) {
          return enabledYear.year() > lastOnPage;
        });
      }

      if (_lodash.default.isNil(maxDate)) return true;
      return lastOnPage < maxDate.year();
    }
  }, {
    key: "isPrevPageAvailable",
    value: function isPrevPageAvailable() {
      var _this$props2 = this.props,
          minDate = _this$props2.minDate,
          enable = _this$props2.enable;
      var firstOnPage = parseInt(_lodash.default.first(this.buildCalendarValues()));

      if (_lodash.default.isArray(enable)) {
        return _lodash.default.some(enable, function (enabledYear) {
          return enabledYear.year() < firstOnPage;
        });
      }

      if (_lodash.default.isNil(minDate)) return true;
      return firstOnPage > minDate.year();
    }
  }, {
    key: "render",
    value: function render() {
      var rest = (0, _lib.getUnhandledProps)(YearPicker, this.props);
      return _react.default.createElement(_YearView.default, _extends({}, rest, {
        years: this.buildCalendarValues(),
        onNextPageBtnClick: this.switchToNextPage,
        onPrevPageBtnClick: this.switchToPrevPage,
        onYearClick: this.handleChange,
        onBlur: this.handleBlur,
        inline: this.props.inline,
        onMount: this.props.onCalendarViewMount,
        hovered: this.state.hoveredCellPosition,
        onCellHover: this.onHoveredCellPositionChange,
        hasPrevPage: this.isPrevPageAvailable(),
        hasNextPage: this.isNextPageAvailable(),
        disabled: this.getDisabledYearsPositions(),
        active: this.getActiveCellPosition()
      }));
    }
  }]);

  return YearPicker;
}(_BasePicker2.default);

_defineProperty(YearPicker, "handledProps", ["closePopup", "disable", "enable", "hasHeader", "initializeWith", "inline", "isPickerInFocus", "isTriggerInFocus", "maxDate", "minDate", "onCalendarViewMount", "onChange", "value"]);

YearPicker.propTypes = {
  /** Called after year is selected. */
  onChange: _propTypes.default.func.isRequired,

  /** A value for initializing year picker's state. */
  initializeWith: _propTypes.default.instanceOf(_moment.default).isRequired,
  hasHeader: _propTypes.default.bool,

  /** Currently selected year. */
  value: _propTypes.default.instanceOf(_moment.default),

  /** Array of disabled years. */
  disable: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_moment.default)),

  /** Array of enabled years. */
  enable: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_moment.default)),

  /** Minimal year that could be selected. */
  minDate: _propTypes.default.instanceOf(_moment.default),

  /** Maximal year that could be selected. */
  maxDate: _propTypes.default.instanceOf(_moment.default),

  /** Force popup to close. */
  closePopup: _propTypes.default.func,
  isPickerInFocus: _propTypes.default.func,
  isTriggerInFocus: _propTypes.default.func,
  onCalendarViewMount: _propTypes.default.func,
  inline: _propTypes.default.bool
};
var _default = YearPicker;
exports.default = _default;