"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _keyboardKey = _interopRequireDefault(require("keyboard-key"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BasePicker =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BasePicker, _React$Component);

  function BasePicker() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, BasePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BasePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onHoveredCellPositionChange", function (e, _ref) {
      var itemPosition = _ref.itemPosition;

      _this.setState({
        hoveredCellPosition: itemPosition
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "canCalendarCatchKeyboardEvents", function () {
      if (_this.props.inline) {
        return _this.props.isPickerInFocus();
      }

      return _this.props.isTriggerInFocus();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyPress", function (event) {
      if (!_this.canCalendarCatchKeyboardEvents()) {
        return;
      }

      var key = _keyboardKey.default.getKey(event);

      switch (key) {
        case 'Enter':
          _this.handleEnterKeyPress(event);

          break;

        default:
          _this.handleArrowKeyPress(event);

      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEnterKeyPress", function (event) {
      var key = _keyboardKey.default.getKey(event);

      if (key === 'Enter' && _this.canCalendarCatchKeyboardEvents()) {
        event.preventDefault();

        var selectedValue = _this.buildCalendarValues()[_this.state.hoveredCellPosition];

        _this.handleChange(null, {
          value: selectedValue,
          itemPosition: _this.state.hoveredCellPosition
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleBlur", function () {
      _this.props.closePopup && _this.props.closePopup();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleArrowKeyPress", function (event) {
      if (!_this.canCalendarCatchKeyboardEvents()) {
        return;
      }

      var key = _keyboardKey.default.getKey(event);

      var selectableCells = _this.getSelectableCellPositions();

      var nextSelectableCellPositionLeft = selectableCells.slice(0, selectableCells.indexOf(_this.state.hoveredCellPosition)).pop();
      var nextSelectableCellPositionRight = selectableCells.slice(selectableCells.indexOf(_this.state.hoveredCellPosition) + 1)[0];

      switch (key) {
        case 'ArrowLeft':
          event.preventDefault();

          if (nextSelectableCellPositionLeft) {
            _this.onHoveredCellPositionChange(null, {
              itemPosition: nextSelectableCellPositionLeft
            });
          } else {
            _this.isPrevPageAvailable() && _this.switchToPrevPage(null, null, function () {
              var selectableCells = _this.getSelectableCellPositions();

              _this.onHoveredCellPositionChange(null, {
                itemPosition: selectableCells[selectableCells.length - 1]
              });
            });
          }

          break;

        case 'ArrowRight':
          event.preventDefault();

          if (nextSelectableCellPositionRight) {
            _this.onHoveredCellPositionChange(null, {
              itemPosition: nextSelectableCellPositionRight
            });
          } else {
            _this.isNextPageAvailable() && _this.switchToNextPage(null, null, function () {
              var selectableCells = _this.getSelectableCellPositions();

              _this.onHoveredCellPositionChange(null, {
                itemPosition: selectableCells[0]
              });
            });
          }

          break;

        case 'ArrowUp':
          event.preventDefault();

          if (_lodash.default.includes(selectableCells, _this.state.hoveredCellPosition - _this.PAGE_WIDTH)) {
            _this.onHoveredCellPositionChange(null, {
              itemPosition: _this.state.hoveredCellPosition - _this.PAGE_WIDTH
            });
          }

          break;

        case 'ArrowDown':
          event.preventDefault();

          if (_lodash.default.includes(selectableCells, _this.state.hoveredCellPosition + _this.PAGE_WIDTH)) {
            _this.onHoveredCellPositionChange(null, {
              itemPosition: _this.state.hoveredCellPosition + _this.PAGE_WIDTH
            });
          }

          break;

        default:
          break;
      }
    });

    return _this;
  }

  _createClass(BasePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        hoveredCellPosition: this.getActiveCellPosition && this.getActiveCellPosition() || this.getInitialDatePosition()
      });
      document.addEventListener('keydown', this.handleKeyPress);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.handleKeyPress);
    }
  }]);

  return BasePicker;
}(_react.default.Component);

var _default = BasePicker;
exports.default = _default;