"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = __importStar(require("./")), next = _1;
var on_demand_entries_client_1 = __importDefault(require("./on-demand-entries-client"));
var webpack_hot_middleware_client_1 = __importDefault(require("./webpack-hot-middleware-client"));
// Temporary workaround for the issue described here:
// https://github.com/zeit/next.js/issues/3775#issuecomment-407438123
// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import
// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries
import('./noop');
var assetPrefix = window.__NEXT_DATA__.assetPrefix;
var prefix = assetPrefix || '';
var webpackHMR = webpack_hot_middleware_client_1.default({ assetPrefix: prefix });
window.next = next;
_1.default({ webpackHMR: webpackHMR })
    .then(function (emitter) {
    on_demand_entries_client_1.default({ assetPrefix: prefix });
    var lastScroll;
    emitter.on('before-reactdom-render', function (_a) {
        var Component = _a.Component, ErrorComponent = _a.ErrorComponent;
        // Remember scroll when ErrorComponent is being rendered to later restore it
        if (!lastScroll && Component === ErrorComponent) {
            var pageXOffset = window.pageXOffset, pageYOffset = window.pageYOffset;
            lastScroll = {
                x: pageXOffset,
                y: pageYOffset
            };
        }
    });
    emitter.on('after-reactdom-render', function (_a) {
        var Component = _a.Component, ErrorComponent = _a.ErrorComponent;
        if (lastScroll && Component !== ErrorComponent) {
            // Restore scroll after ErrorComponent was replaced with a page component by HMR
            var x = lastScroll.x, y = lastScroll.y;
            window.scroll(x, y);
            lastScroll = null;
        }
    });
}).catch(function (err) {
    console.error('Error was not caught', err);
});
