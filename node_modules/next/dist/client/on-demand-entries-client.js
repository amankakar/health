"use strict";
/* global location, WebSocket */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = __importDefault(require("next/router"));
var unfetch_1 = __importDefault(require("unfetch"));
var hostname = location.hostname;
var retryTime = 5000;
var ws = null;
var lastHref = null;
exports.default = (function (_a) {
    var assetPrefix = _a.assetPrefix;
    return __awaiter(_this, void 0, void 0, function () {
        function ping() {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (ws.readyState === ws.OPEN) {
                        ws.send(router_1.default.pathname);
                    }
                    return [2 /*return*/];
                });
            });
        }
        function runPinger() {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!document.hidden) return [3 /*break*/, 3];
                            return [4 /*yield*/, ping()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, new Promise(function (resolve) {
                                    pingerTimeout = setTimeout(resolve, 5000);
                                })];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 0];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        var setup, pingerTimeout;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    router_1.default.ready(function () {
                        router_1.default.events.on('routeChangeComplete', ping);
                    });
                    setup = function (reconnect) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (ws && ws.readyState === ws.OPEN) {
                                return [2 /*return*/, Promise.resolve()];
                            }
                            return [2 /*return*/, new Promise(function (resolve) {
                                    ws = new WebSocket("ws://" + hostname + ":" + process.env.NEXT_WS_PORT);
                                    ws.onopen = function () { return resolve(); };
                                    ws.onclose = function () {
                                        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: 
                                                    // check if next restarted and we have to reload to get new port
                                                    return [4 /*yield*/, unfetch_1.default(assetPrefix + "/_next/on-demand-entries-ping")
                                                            .then(function (res) { return res.status === 200 && location.reload(); })
                                                            .catch(function () { })];
                                                    case 1:
                                                        // check if next restarted and we have to reload to get new port
                                                        _a.sent();
                                                        return [4 /*yield*/, setup(true)];
                                                    case 2:
                                                        _a.sent();
                                                        resolve();
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); }, retryTime);
                                    };
                                    ws.onmessage = function (_a) {
                                        var data = _a.data;
                                        return __awaiter(_this, void 0, void 0, function () {
                                            var payload, pageRes;
                                            return __generator(this, function (_b) {
                                                switch (_b.label) {
                                                    case 0:
                                                        payload = JSON.parse(data);
                                                        if (!(payload.invalid && lastHref !== location.href)) return [3 /*break*/, 2];
                                                        return [4 /*yield*/, unfetch_1.default(location.href, {
                                                                credentials: 'omit'
                                                            })];
                                                    case 1:
                                                        pageRes = _b.sent();
                                                        if (pageRes.status === 200) {
                                                            location.reload();
                                                        }
                                                        else {
                                                            lastHref = location.href;
                                                        }
                                                        _b.label = 2;
                                                    case 2: return [2 /*return*/];
                                                }
                                            });
                                        });
                                    };
                                })];
                        });
                    }); };
                    return [4 /*yield*/, setup()];
                case 1:
                    _b.sent();
                    document.addEventListener('visibilitychange', function () {
                        if (!document.hidden) {
                            runPinger();
                        }
                        else {
                            clearTimeout(pingerTimeout);
                        }
                    }, false);
                    setTimeout(function () {
                        runPinger().catch(function (err) {
                            console.error(err);
                        });
                    }, 10000);
                    return [2 /*return*/];
            }
        });
    });
});
