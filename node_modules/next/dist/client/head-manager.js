"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DOMAttributeNames = {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
};
var HeadManager = /** @class */ (function () {
    function HeadManager() {
        this.updatePromise = null;
    }
    HeadManager.prototype.updateHead = function (head) {
        var _this = this;
        var promise = this.updatePromise = Promise.resolve().then(function () {
            if (promise !== _this.updatePromise)
                return;
            _this.updatePromise = null;
            _this.doUpdateHead(head);
        });
    };
    HeadManager.prototype.doUpdateHead = function (head) {
        var _this = this;
        var tags = {};
        head.forEach(function (h) {
            var components = tags[h.type] || [];
            components.push(h);
            tags[h.type] = components;
        });
        this.updateTitle(tags.title ? tags.title[0] : null);
        var types = ['meta', 'base', 'link', 'style', 'script'];
        types.forEach(function (type) {
            _this.updateElements(type, tags[type] || []);
        });
    };
    HeadManager.prototype.updateTitle = function (component) {
        var title = '';
        if (component) {
            var children = component.props.children;
            title = typeof children === 'string' ? children : children.join('');
        }
        if (title !== document.title)
            document.title = title;
    };
    HeadManager.prototype.updateElements = function (type, components) {
        var headEl = document.getElementsByTagName('head')[0];
        var oldTags = Array.prototype.slice.call(headEl.querySelectorAll(type + '.next-head'));
        var newTags = components.map(reactElementToDOM).filter(function (newTag) {
            for (var i = 0, len = oldTags.length; i < len; i++) {
                var oldTag = oldTags[i];
                if (oldTag.isEqualNode(newTag)) {
                    oldTags.splice(i, 1);
                    return false;
                }
            }
            return true;
        });
        oldTags.forEach(function (t) { return t.parentNode.removeChild(t); });
        newTags.forEach(function (t) { return headEl.appendChild(t); });
    };
    return HeadManager;
}());
exports.default = HeadManager;
function reactElementToDOM(_a) {
    var type = _a.type, props = _a.props;
    var el = document.createElement(type);
    for (var p in props) {
        if (!props.hasOwnProperty(p))
            continue;
        if (p === 'children' || p === 'dangerouslySetInnerHTML')
            continue;
        var attr = DOMAttributeNames[p] || p.toLowerCase();
        el.setAttribute(attr, props[p]);
    }
    var children = props.children, dangerouslySetInnerHTML = props.dangerouslySetInnerHTML;
    if (dangerouslySetInnerHTML) {
        el.innerHTML = dangerouslySetInnerHTML.__html || '';
    }
    else if (children) {
        el.textContent = typeof children === 'string' ? children : children.join('');
    }
    return el;
}
