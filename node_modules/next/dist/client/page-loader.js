"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global document */
var mitt_1 = __importDefault(require("next-server/dist/lib/mitt"));
// smaller version of https://gist.github.com/igrigorik/a02f2359f3bc50ca7a9c
function supportsPreload(list) {
    if (!list || !list.supports) {
        return false;
    }
    try {
        return list.supports('preload');
    }
    catch (e) {
        return false;
    }
}
var hasPreload = supportsPreload(document.createElement('link').relList);
var PageLoader = /** @class */ (function () {
    function PageLoader(buildId, assetPrefix) {
        this.buildId = buildId;
        this.assetPrefix = assetPrefix;
        this.pageCache = {};
        this.prefetchCache = new Set();
        this.pageRegisterEvents = mitt_1.default();
        this.loadingRoutes = {};
    }
    PageLoader.prototype.normalizeRoute = function (route) {
        if (route[0] !== '/') {
            throw new Error("Route name should start with a \"/\", got \"" + route + "\"");
        }
        route = route.replace(/\/index$/, '/');
        if (route === '/')
            return route;
        return route.replace(/\/$/, '');
    };
    PageLoader.prototype.loadPage = function (route) {
        var _this = this;
        route = this.normalizeRoute(route);
        return new Promise(function (resolve, reject) {
            var fire = function (_a) {
                var error = _a.error, page = _a.page;
                _this.pageRegisterEvents.off(route, fire);
                delete _this.loadingRoutes[route];
                if (error) {
                    reject(error);
                }
                else {
                    resolve(page);
                }
            };
            // If there's a cached version of the page, let's use it.
            var cachedPage = _this.pageCache[route];
            if (cachedPage) {
                var error = cachedPage.error, page = cachedPage.page;
                error ? reject(error) : resolve(page);
                return;
            }
            // Register a listener to get the page
            _this.pageRegisterEvents.on(route, fire);
            // If the page is loading via SSR, we need to wait for it
            // rather downloading it again.
            if (document.getElementById("__NEXT_PAGE__" + route)) {
                return;
            }
            // Load the script if not asked to load yet.
            if (!_this.loadingRoutes[route]) {
                _this.loadScript(route);
                _this.loadingRoutes[route] = true;
            }
        });
    };
    PageLoader.prototype.loadScript = function (route) {
        var _this = this;
        route = this.normalizeRoute(route);
        var scriptRoute = route === '/' ? '/index.js' : route + ".js";
        var script = document.createElement('script');
        var url = this.assetPrefix + "/_next/static/" + encodeURIComponent(this.buildId) + "/pages" + scriptRoute;
        script.crossOrigin = process.crossOrigin;
        script.src = url;
        script.onerror = function () {
            var error = new Error("Error when loading route: " + route);
            error.code = 'PAGE_LOAD_ERROR';
            _this.pageRegisterEvents.emit(route, { error: error });
        };
        document.body.appendChild(script);
    };
    // This method if called by the route code.
    PageLoader.prototype.registerPage = function (route, regFn) {
        var _this = this;
        var register = function () {
            try {
                var _a = regFn(), error = _a.error, page = _a.page;
                _this.pageCache[route] = { error: error, page: page };
                _this.pageRegisterEvents.emit(route, { error: error, page: page });
            }
            catch (error) {
                _this.pageCache[route] = { error: error };
                _this.pageRegisterEvents.emit(route, { error: error });
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            // Wait for webpack to become idle if it's not.
            // More info: https://github.com/zeit/next.js/pull/1511
            if (module.hot && module.hot.status() !== 'idle') {
                console.log("Waiting for webpack to become \"idle\" to initialize the page: \"" + route + "\"");
                var check_1 = function (status) {
                    if (status === 'idle') {
                        module.hot.removeStatusHandler(check_1);
                        register();
                    }
                };
                module.hot.status(check_1);
                return;
            }
        }
        register();
    };
    PageLoader.prototype.prefetch = function (route) {
        return __awaiter(this, void 0, void 0, function () {
            var scriptRoute, link;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        route = this.normalizeRoute(route);
                        scriptRoute = route === '/' ? '/index.js' : route + ".js";
                        if (this.prefetchCache.has(scriptRoute)) {
                            return [2 /*return*/];
                        }
                        this.prefetchCache.add(scriptRoute);
                        // Inspired by quicklink, license: https://github.com/GoogleChromeLabs/quicklink/blob/master/LICENSE
                        // Don't prefetch if the user is on 2G / Don't prefetch if Save-Data is enabled
                        if ('connection' in navigator) {
                            if ((navigator.connection.effectiveType || '').indexOf('2g') !== -1 || navigator.connection.saveData) {
                                return [2 /*return*/];
                            }
                        }
                        // Feature detection is used to see if preload is supported
                        // If not fall back to loading script tags before the page is loaded
                        // https://caniuse.com/#feat=link-rel-preload
                        if (hasPreload) {
                            link = document.createElement('link');
                            link.rel = 'preload';
                            link.crossOrigin = process.crossOrigin;
                            link.href = this.assetPrefix + "/_next/static/" + encodeURIComponent(this.buildId) + "/pages" + scriptRoute;
                            link.as = 'script';
                            document.head.appendChild(link);
                            return [2 /*return*/];
                        }
                        if (!(document.readyState === 'complete')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadPage(route)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            window.addEventListener('load', function () {
                                _this.loadPage(route).then(function () { return resolve(); }, reject);
                            });
                        })];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageLoader.prototype.clearCache = function (route) {
        route = this.normalizeRoute(route);
        delete this.pageCache[route];
        delete this.loadingRoutes[route];
        var script = document.getElementById("__NEXT_PAGE__" + route);
        if (script) {
            script.parentNode.removeChild(script);
        }
    };
    return PageLoader;
}());
exports.default = PageLoader;
